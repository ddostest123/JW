<?xml version="1.0" encoding="UTF-8"?>
<bm:model xmlns:bm="http://www.aurora-framework.org/schema/bm" defaultOrderBy="approve_date desc">
    <bm:operations>
        <bm:operation name="query">
            <bm:query-sql><![CDATA[
                SELECT
                    v.*,
                    (
                        CASE
                            WHEN NVL(v.adjust_cost,0) = 0 AND
                                v.account_total_costs >= v.total_cost
                            THEN v.account_total_costs - v.total_cost
                            WHEN v.adjust_cost        > 0 AND
                                v.account_total_costs >= v.adjust_cost
                            THEN v.account_total_costs - v.adjust_cost
                            ELSE 0
                        END) AS exceed_money
                FROM
                    (SELECT
                        i.document_number,
                        hs.title,
                        (SELECT
                            listagg(li.work_num, '') within GROUP(
                        ORDER BY
                            li.work_num)
                        FROM
                            pur_rfx_ln_item_snaps lis,
                            pur_rfx_ln_items li
                        WHERE
                            lis.rfx_header_snap_id = hs.rfx_header_snap_id AND
                            li.rfx_line_item_id    = lis.rfx_line_item_id
                        ) work_num,
                        (SELECT
                            ic.category_name
                        FROM
                            pur_rfx_ln_item_snaps lis,
                            mtl_categories_user_defined_vl ic
                        WHERE
                            lis.line_num =
                            (SELECT
                                MIN(rlis.line_num)
                            FROM
                                pur_rfx_ln_item_snaps rlis
                            WHERE
                                rlis.rfx_header_snap_id = hs.rfx_header_snap_id
                            ) AND
                            lis.rfx_header_snap_id = hs.rfx_header_snap_id AND
                            ic.category_udf_id     = lis.item_category_id
                        ) category_name,
                        NVL(hs.total_cost,
                        (SELECT
                            SUM(NVL(li.cost_price, 0) * NVL(li.quantity, 0))
                        FROM
                            pur_rfx_ln_item_snaps li
                        WHERE
                            hs.rfx_header_id = li.rfx_header_id
                        )) total_cost,
                        hs.sales_costs,
                        hs.adjust_cost,
                        (SELECT
                            SUM(NVL(fl.valid_fb_retail_price, 0) * NVL(fl.allotted_quantity, 0))
                        FROM
                            pur_rfx_feedback_lines fl,
                            pur_rfx_feedback_headers fh,
                            pur_rfx_ln_item_snaps li
                        WHERE
                            fl.rfx_line_item_id   = li.rfx_line_item_id AND
                            fl.feedback_header_id = fh.feedback_header_id AND
                            li.rfx_header_snap_id = hs.rfx_header_snap_id
                        ) AS account_total_costs,
                        hs.approved_amount,
                        (SELECT
                            t.code_value_name
                        FROM
                            sys_code_values_v t
                        WHERE
                            t.code       = 'WFL_WORKFLOW_INSTANCE_STATUS' AND
                            t.code_value = i.status
                        ) status,
                        i.status status_code,
                        (SELECT
                            listagg(chr(10)
                            ||'['
                            || n.name
                            || ']'
                            || ':'
                            || r.user_name
                            || '.'
                            || r.comment_text, '') within GROUP(
                        ORDER BY
                            r.record_id ASC)
                        FROM
                            wfl_approve_record_v r,
                            wfl_workflow_node_vl n
                        WHERE
                            r.instance_id = i.instance_id AND
                            r.node_id     = n.node_id
                        ) approve_records,
                        NVL(hs.cost_comments,
                        (SELECT
                            rh.cost_comments
                        FROM
                            pur_rfx_headers rh
                        WHERE
                            rh.rfx_header_id = hs.rfx_header_id
                        )) cost_comments,
                        (SELECT
                            TO_CHAR(MAX(r.creation_date),'YYYY-MM-DD')
                        FROM
                            wfl_approve_record r
                        WHERE
                            r.instance_id        = i.instance_id AND
                            r.actual_approver_id =${/session/@user_id}
                        ) approve_date,
                        i.instance_id
                    FROM
                        wfl_workflow_instance i,
                        pur_rfx_header_snaps hs
                    WHERE
                        i.instance_param = hs.rfx_header_snap_id AND
                        EXISTS
                        (SELECT
                            1
                        FROM
                            wfl_approve_record war
                        WHERE
                            war.instance_id        = i.instance_id AND
                            war.actual_approver_id = ${/session/@user_id}
                        )
                    ) v #WHERE_CLAUSE# #ORDER_BY_CLAUSE#
            ]]></bm:query-sql>
        </bm:operation>
    </bm:operations>
    <bm:query-fields>
        <bm:query-field name="status_code" queryExpression="status_code = ${@status_code}"/>
        <bm:query-field name="title" queryExpression="title like &apos;%&apos;||${@title}||&apos;%&apos;"/>
        <bm:query-field name="rfx_number" queryExpression="document_number like &apos;%&apos;||${@rfx_number}||&apos;%&apos;"/>
        <bm:query-field name="approve_date_from" queryExpression="to_date(approve_date,&apos;yyyy-mm-dd&apos;) &gt;= to_date(${@approve_date_from},&apos;yyyy-mm-dd&apos;)"/>
        <bm:query-field name="approve_date_to" queryExpression="to_date(approve_date,&apos;yyyy-mm-dd&apos;) &lt; to_date(${@approve_date_to},&apos;yyyy-mm-dd&apos;)+1"/>
    </bm:query-fields>
</bm:model>
