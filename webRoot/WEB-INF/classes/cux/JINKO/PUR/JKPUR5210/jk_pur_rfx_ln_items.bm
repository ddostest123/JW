<?xml version="1.0" encoding="UTF-8"?>
<!--
    $Author:  
    $Date: 2013-6-27 上午9:38:00  
    $Revision: 1.0  
    $Purpose: 
-->
<bm:model xmlns:s="aurora.plugin.script" xmlns:bm="http://www.aurora-framework.org/schema/bm">
    <bm:operations>
        <bm:operation name="query">
            <bm:query-sql><![CDATA[
                SELECT 
                	(SELECT
                            scv.code_value
                        FROM
                            sys_code_values_vl scv,
                            sys_codes_vl sc
                        WHERE
                            sc.code_id     = scv.code_id AND
                            scv.code_value_name = li.item_note AND
                            sc.code        = 'PUR_TERMS_OF_TRADE')
                     trade_terms,      
                     (SELECT
                            scv.code_value_name
                        FROM
                            sys_code_values_vl scv,
                            sys_codes_vl sc
                        WHERE
                            sc.code_id     = scv.code_id AND
                            scv.code_value = li.item_note AND
                            sc.code        = 'PUR_TERMS_OF_TRADE')
                     trade_terms_desc,      	 
                	(SELECT 
                    	prl.feedback_line_id 
                    FROM 
                    	pur_rfx_feedback_lines prl 
                    WHERE 
                    prl.rfx_line_item_id   = li.rfx_line_item_id
                    ) as feedback_line_id,
                     
                   TO_CHAR((SELECT 
                    	prl.feedback_expiry_date_from 
                    FROM 
                    	pur_rfx_feedback_lines prl 
                    WHERE 
                    prl.rfx_line_item_id   = li.rfx_line_item_id
                    ),'yyyy-mm-dd') as feedback_expiry_date_from, 
                    
                    TO_CHAR((SELECT 
                    	prl.feedback_expiry_date_to 
                    FROM 
                    	pur_rfx_feedback_lines prl 
                    WHERE 
                    prl.rfx_line_item_id   = li.rfx_line_item_id
                    ),'yyyy-mm-dd') as feedback_expiry_date_to,
                    
                    (SELECT 
                    	prl.current_fb_retail_price 
                    FROM 
                    	pur_rfx_feedback_lines prl 
                    WHERE 
                    prl.rfx_line_item_id   = li.rfx_line_item_id
                    ) as current_fb_retail_price,
                    
                    (SELECT 
                    	prl.current_delivery_cycle 
                    FROM 
                    	pur_rfx_feedback_lines prl 
                    WHERE 
                    prl.rfx_line_item_id   = li.rfx_line_item_id
                    ) as current_delivery_cycle,
                    
                    rownum*10 line_number,
                    li.rfx_line_item_id,
                    li.rfx_header_id,
                    li.inv_organization_id,
                    li.trans_cost,
                    (SELECT
                        io.description
                    FROM
                        inv_organizations_vl io
                    WHERE
                        io.inv_organization_id = li.inv_organization_id
                    ) inv_organization_desc,
                    li.pur_ln_type,
                    NVL(li.item_category_id,
                    (SELECT
                        cci.category_udf_id
                    FROM
                        mtl_category_classify_items cci
                    WHERE
                        cci.item_id         = li.item_id AND
                        cci.category_udf_id =
                        (SELECT
                            MIN(cci.category_udf_id)
                        FROM
                            mtl_category_classify_items cci
                        WHERE
                            cci.item_id = li.item_id
                        )
                    )) item_category_id,
                    NVL(
                    (SELECT
                        ic.category_name
                    FROM
                        mtl_categories_user_defined_vl ic
                    WHERE
                        ic.category_udf_id = li.item_category_id
                    ),
                    (SELECT
                        udv.category_name
                    FROM
                        mtl_category_classify_items cci,
                        mtl_categories_user_defined_vl udv
                    WHERE
                        cci.category_udf_id = udv.category_udf_id AND
                        cci.item_id         = li.item_id AND
                        cci.category_udf_id =
                        (SELECT
                            MIN(cci.category_udf_id)
                        FROM
                            mtl_category_classify_items cci
                        WHERE
                            cci.item_id = li.item_id
                        )
                    )) AS item_category_desc,
                    (SELECT
                        ic.quote_tmpl_flag
                    FROM
                        mtl_categories_user_defined ic
                    WHERE
                        ic.category_udf_id = li.item_category_id
                    ) quote_tmpl_flag,
                    li.item_id,
                    li.item_code,
                    li.item_desc,
                    li.item_note,
                    li.item_parameter_config,
                    li.uom_code,
                    (SELECT
                        fv.uom_desc
                    FROM
                        fnd_uom_codes_vl fv
                    WHERE
                        fv.uom_code       = li.uom_code AND
                        fv.business_group = h.owner_business_group
                    ) uom_desc,
                    li.quantity,
                    TO_CHAR(li.need_by_date, 'yyyy-mm-dd') need_by_date,
                    li.suggested_operation,
                    li.cancel_flag,
                    li.data_source,
                    li.comments,
                    li.line_num,
                    li.limit_price,
                    li.cost_price,
                    (NVL(li.cost_total_price, (li.cost_price * li.quantity))) AS cost_total_price,
                    li.tax_included_flag,
                    li.tax_type_id,
                    li.tax_type_code,
                    li.tax_type_rate,
                    --li.round_flag,
                    li.pur_req_num,
                    li.feedback_range,
                    h.round,
                    h.version,
                    li.flex_appl_relevance_id,
                    li.line_num,
                    li.req_header_id,
                    li.req_number,
                    li.req_line_id,
                    li.req_line_num,
                    li.current_round,
                    li.current_version,
                    li.bom_num,
                    li.work_num,
                    li.samples_requested,
                  -- (select prfl.tax_included_flag from pur_rfx_feedback_lines prfl
                  --  where prfl.rfx_line_item_id = li.rfx_line_item_id) tax_included_flag,
                    li.tax_included_flag,
                    (SELECT
                        COUNT(*)
                    FROM
                        fnd_atm_attachment_multi am
                    WHERE
                        am.table_name     = 'PUR_RFX_LN_ITEMS' AND
                        am.table_pk_value = TO_CHAR(li.rfx_line_item_id)
                    ) AS atm_counts,
                    li.ladder_inquiry_flag,
                    li.return_reasons
                FROM
                    pur_rfx_ln_items li,
                    pur_rfx_headers h #WHERE_CLAUSE# AND
                    li.rfx_finished_flag  = 'N' AND
                    li.cancel_flag        = 'N' AND
                    NVL(li.round_flag,'Y')='Y' AND
                    h.rfx_header_id       = li.rfx_header_id
                ORDER BY
                    li.line_num
            ]]></bm:query-sql>
            <bm:parameters>
                <bm:parameter name="rfx_header_id" inputPath="@rfx_header_id"/>
            </bm:parameters>
        </bm:operation>
        <bm:operation name="insert">
            <bm:parameters>
                <bm:parameter name="rfx_line_item_id" dataType="java.lang.Long" input="false" output="true" outputPath="@rfx_line_item_id"/>
                <bm:parameter name="feedback_line_id" dataType="java.lang.Long" input="false" output="true" outputPath="@feedback_line_id"/>
            </bm:parameters>
            <bm:update-sql><![CDATA[
              declare 
            	v_rfx_line_item_id number;
            	v_feedback_line_id number;
              BEGIN
                jk_pur_rfx_pkg.create_pur_rfx_ln_items
                (
                  x_feedback_line_id=>v_feedback_line_id,
                  x_rfx_line_item_id=>v_rfx_line_item_id,
                  p_feedback_header_id=>${/parameter/@feedback_header_id},
                  p_rfx_header_id=>${/parameter/@rfx_header_id},
                  p_inv_organization_id=>${@inv_organization_id},
                  p_pur_ln_type=>${@pur_ln_type},
                  p_item_category_id=>${@item_category_id},
                  p_item_id=>${@item_id},
                  p_item_code=>${@item_code},
                  p_item_desc=>${@item_desc},
                  p_item_note=>${@item_note},
                  p_item_parameter_config=>${@item_parameter_config},
                  p_uom_code=>${@uom_code},
                  p_quantity=>${@quantity},
                  p_need_by_date=>to_date(${@need_by_date},'yyyy-mm-dd hh24:mi:ss'),
                  p_feedback_range=>${@feedback_range},
                  p_pur_req_num=>${@pur_req_num},
                  p_data_source=>${@data_source},
                  p_source_from=>${@source_from},
                  p_source_from_id=>${@source_from_id},
                  p_source_from_num=>${@source_from_num},
                  p_comments=>${@comments},
                  p_proposed_vendor_id=>${@proposed_vendor_id},
                  p_proposed_vendor_code=>${@proposed_vendor_code},
                  p_proposed_vendor_desc=>${@proposed_vendor_desc},
                  p_proposed_price=>${@proposed_price},
                  p_proposed_net_price=>${@proposed_net_price},
                  p_proposed_net_amount=>${@proposed_net_amount},
                  p_proposed_tax_amount=>${@proposed_tax_amount},
                  p_proposed_total_amount=>${@proposed_total_amount},
                  p_proposed_functional_amount=>${@proposed_functional_amount},
                  p_proposed_entered_amount=>${@proposed_entered_amount},
                  p_auto_create_distribute =>${@auto_create_distribute},
                  p_line_num=>${@line_num},
                  p_limit_price=>${@limit_price},
                  p_cost_price=>${@cost_price},
                  p_tax_included_flag=>${@tax_included_flag},
                  p_tax_type_id=>${@tax_type_id},
                  p_tax_type_code=>${@tax_type_code},
                  p_tax_type_rate=>${@tax_type_rate},
                  p_round_flag=>${@round_flag},
                  p_samples_requested=>${@samples_requested},
                  p_work_num=>${@work_num},
                  p_bom_num=>${@bom_num},
                  p_user_id=>${/session/@user_id},
                  p_trans_cost => ${@trans_cost},
                  p_ladder_inquiry_flag	=> ${@ladder_inquiry_flag},
                  
                  p_current_fb_retail_price   => ${@current_fb_retail_price},
    			  p_feedback_expiry_date_from => to_date(${@feedback_expiry_date_from},'yyyy-mm-dd hh24:mi:ss'),
                  p_feedback_expiry_date_to   => to_date(${@feedback_expiry_date_to},'yyyy-mm-dd hh24:mi:ss'),
                  p_trade_terms          => ${@trade_terms}   ,  
                  p_current_delivery_cycle   => ${@current_delivery_cycle} 
                );               
                
              END;
		      ]]></bm:update-sql>
        </bm:operation>
        <bm:operation name="update">
            <bm:update-sql><![CDATA[                          	
              BEGIN
                jk_pur_rfx_pkg.modify_pur_rfx_ln_items
                (
                  p_feedback_line_id     =>${@feedback_line_id},  
    		      p_rfx_line_item_id      =>${@rfx_line_item_id}, 
                  p_inv_organization_id   =>${@inv_organization_id}, 
                  p_pur_ln_type         =>${@pur_ln_type},  
                  p_item_category_id    =>${@item_category_id},   
                  p_item_id                =>${@item_id },
                  p_item_code              =>${@item_code},
                  p_item_desc              =>${@item_desc},
                  p_item_note              =>${@item_note},
                  p_item_parameter_config  =>${@item_parameter_config},
                  p_uom_code               =>${@uom_code},
                  p_quantity               =>${@quantity},
                  p_need_by_date           =>to_date(${@need_by_date},'yyyy-mm-dd hh24:mi:ss'),
                  p_feedback_range         =>${@feedback_range},
                  p_pur_req_num            =>${@pur_req_num},
                  p_target_price           =>${@target_price},
                  p_comments               =>${@comments},
                  p_auto_create_distribute =>${@auto_create_distribute},
                  p_line_num               =>${@line_num},
                  p_limit_price            =>${@limit_price},
                  p_tax_included_flag      =>${@tax_included_flag},
                  p_tax_type_id            =>${@tax_type_id},
                  p_tax_type_code          =>${@tax_type_code},
                  p_tax_type_rate          =>${@tax_type_rate},
                  p_round_flag             =>${@round_flag},
                  p_samples_requested      =>${@samples_requested},
                  p_cost_price             =>${@cost_price},
                  p_work_num               =>${@work_num},
                  p_bom_num                =>${@bom_num},
                  p_sm_comment             =>${@sm_comment},
                  p_specification          =>${@specification},
                  p_ladder_inquiry_flag    =>${@ladder_inquiry_flag},
                  p_user_id                =>${/session/@user_id},
                  p_trans_cost             =>${@trans_cost},    
                  p_current_fb_retail_price    =>${@current_fb_retail_price},                              
                  p_feedback_expiry_date_from  =>to_date(${@feedback_expiry_date_from},'yyyy-mm-dd hh24:mi:ss'),        
                  p_feedback_expiry_date_to    =>to_date(${@feedback_expiry_date_to},'yyyy-mm-dd hh24:mi:ss'),        
                  p_trade_terms                =>${@trade_terms},                                          
                  p_current_delivery_cycle     =>${@current_delivery_cycle}                                 
                );                 
              END;
		      ]]></bm:update-sql>
        </bm:operation>
        <bm:operation name="delete">
            <bm:update-sql><![CDATA[
              BEGIN
                pur_rfx_pkg.delete_pur_rfx_ln_items
                (
                  p_rfx_line_item_id=>${@rfx_line_item_id},
                  p_user_id=>${/session/@user_id}
                ); 
              END;
		      ]]></bm:update-sql>
        </bm:operation>
    </bm:operations>
    <bm:query-fields>
        <bm:query-field name="rfx_line_item_ids" queryExpression="rfx_line_item_id in (${:@rfx_line_item_ids})"/>
        <bm:query-field name="rfx_header_id" queryExpression="li.rfx_header_id = ${@rfx_header_id}"/>
    </bm:query-fields>
    <bm:data-filters>
        <bm:data-filter expression="1=1"/>
    </bm:data-filters>
</bm:model>
