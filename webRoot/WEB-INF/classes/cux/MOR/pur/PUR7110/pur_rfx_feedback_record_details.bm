<?xml version="1.0" encoding="UTF-8"?>
<!--
    $Author: IsaacF  
    $Date: 2013-6-27 上午9:38:00  
    $Revision: 1.0  
    $Purpose: 
-->
<bm:model xmlns:s="aurora.plugin.script" xmlns:bm="http://www.aurora-framework.org/schema/bm">
    <bm:operations>
        <bm:operation name="query">
            <bm:query-sql><![CDATA[
select * from (

select l.feedback_line_id,
       h.status header_status,
       h.rfx_header_id,
       h.rfx_version,
       h.rfx_round,
       h.coop_business_group,
       h.coop_company_id,
       h.vendor_id,
       (SELECT fc.company_code FROM fnd_companies fc WHERE fc.company_id = h.coop_company_id) vendor_code,
       (SELECT fc.company_full_name FROM fnd_companies_vl fc WHERE fc.company_id = h.coop_company_id) vendor_desc,
       to_char(l.feedback_time,'yyyy-mm-dd hh24:mi:ss') feedback_time,
       l.feedback_header_id,
       l.status,
       l.rfx_line_item_id,
       (select scv.code_value_name
          from sys_code_values_vl scv, sys_codes_vl sc
         where sc.code_id = scv.code_id
           and scv.code_value = l.status
           and sc.code = 'PUR_RFX_FEEDBACK_LINE_STATUS') status_desc,
       l.inv_organization_id,
       l.item_category_id,
       l.item_id,
       l.item_code,
       l.item_desc,
       l.uom_code,
       rl.quantity,
       to_char(l.need_by_date, 'yyyy-mm-dd') need_by_date,
       l.feedback_range,
       to_char(promised_date, 'yyyy-mm-dd') promised_date,
       to_char(feedback_expiry_date_from, 'yyyy-mm-dd') feedback_expiry_date_from,
       to_char(feedback_expiry_date_to, 'yyyy-mm-dd') feedback_expiry_date_to,
       l.delivery_cycle,
       l.current_fb_by,
       (select u.user_desc
          from sys_user_v u
         where u.user_id = l.current_fb_by) current_fb_by_desc,
       l.current_fb_quantity,
       l.current_fb_retail_price,
       l.current_fb_wholesale_price,
       l.current_fb_reason,
       l.current_bargain_by,
       (select u.user_desc
          from sys_user_v u
         where u.user_id = l.current_bargain_by) current_bargain_by_desc,
       l.current_bargain_quantity,
       l.current_bargain_retail_price,
       l.current_bargain_whlsale_price,
       l.current_bargain_reason,
       l.valid_fb_by,
       (select u.user_desc from sys_user_v u where u.user_id = l.valid_fb_by) valid_fb_by_desc,
       l.valid_fb_quantity,
       l.valid_fb_retail_price,
       l.valid_fb_wholesale_price,
       l.valid_fb_reason,
       l.valid_bargain_by,
       (select u.user_desc
          from sys_user_v u
         where u.user_id = l.valid_bargain_by) valid_bargain_by_desc,
       l.valid_bargain_quantity,
       l.valid_bargain_retail_price,
       l.valid_bargain_wholesale_price,
       l.valid_bargain_reason,
       l.abandoned_flag,
       l.suggested_flag,
       l.suggested_note,
       l.comments,
       l.creation_date,
       l.created_by,
       l.last_update_date,
       l.last_updated_by,
       (SELECT quote_header_id FROM pur_rfx_quote_headers rqh WHERE rqh.rfx_line_item_id = l.rfx_line_item_id) quote_header_id,
       pur_rfx_feedback_pkg.get_last_round_price(h.rfx_header_id,
       											 h.owner_business_group,
                                                 h.coop_company_id,
                                                 l.item_id,
                                                 ${/session/@user_id}) AS last_valid_fb_retail_price,
       pur_rfx_feedback_pkg.get_floating_percentage(h.rfx_header_id,
       												l.valid_fb_retail_price,
   													h.owner_business_group,
                                                 	h.coop_company_id,
                                                 	l.item_id,
                                                 	${/session/@user_id}) AS floating_percentage,
       l.allotted_quantity,
	   (round((l.allotted_quantity / rl.quantity),
	          4) * 100) AS allotted_percentage,
	   (SELECT li.line_num FROM pur_rfx_ln_items li WHERE li.rfx_line_item_id = l.rfx_line_item_id) AS line_num,
	   l.price_batch_quantity,
	   l.min_purchase,
	   l.min_package
  from pur_rfx_feedback_lines   l,
       pur_rfx_feedback_headers h,
       pur_rfx_ln_items         rl
 where h.feedback_header_id = l.feedback_header_id
   --and h.status = 'FINISHED'
   and l.rfx_line_item_id = rl.rfx_line_item_id
   and rl.cancel_flag = 'N'
   --and rl.rfx_finished_flag = 'Y'
   and l.cancel_flag = 'N'
   
   and h.rfx_round=rl.current_round
   and h.rfx_version=rl.current_version
   
) t
     #WHERE_CLAUSE#
     --order by valid_fb_wholesale_price
     order by line_num
]]></bm:query-sql>
        </bm:operation>
        <bm:operation name="update">
            <bm:update-sql><![CDATA[
              BEGIN
                pur_rfx_feedback_pkg.save_rfx_fb_ln_suggest(p_feedback_line_id =>${@feedback_line_id},
                                   p_suggested_flag    =>${@suggested_flag},
                                   p_suggested_note    =>${@suggested_note},
                                   p_allotted_quantity =>${@allotted_quantity},
                                   p_price_batch_quantity=>${@price_batch_quantity},
                                   p_user_id           =>${/session/@user_id});
              END;
		      ]]></bm:update-sql>
        </bm:operation>
    </bm:operations>
    <bm:query-fields>
        <bm:query-field name="feedback_line_id" queryExpression="feedback_line_id = ${@feedback_line_id}"/>
        <bm:query-field name="item_id" queryExpression="item_id = ${@item_id}"/>
        <bm:query-field name="rfx_line_item_id" queryExpression="rfx_line_item_id = ${@rfx_line_item_id}"/>
        <bm:query-field name="coop_company_id" queryExpression="coop_company_id = ${@coop_company_id}"/>
        <bm:query-field name="rfx_header_id" queryExpression="rfx_header_id = ${@rfx_header_id}"/>
        <bm:query-field name="current_round" queryExpression="rfx_round = ${@current_round}"/>
        <bm:query-field name="current_version" queryExpression="rfx_version = ${@current_version}"/>
    </bm:query-fields>
</bm:model>
