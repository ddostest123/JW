<?xml version="1.0" encoding="UTF-8"?>
<bm:model xmlns:s="aurora.plugin.script" xmlns:bm="http://www.aurora-framework.org/schema/bm" defaultOrderBy="barcode desc,line_num">
    <bm:operations>
        <bm:operation name="query">
            <bm:query-sql><![CDATA[
				SELECT * FROM (
					SELECT o.packing_num,
					       o.packing_quantity,
					       o.record_id,
					       b.asn_outside_barcode_id,
					       b.barcode,
					       h.asn_number,
					       l.asn_detail_number,
					       ph.display_po_number po_number,
					       pl.line_num,
					       nvl((SELECT m.display_item_code
					             FROM mtl_system_items_vl m
					            WHERE m.item_id = l.item_id),
					           l.item_code) AS require_item_code,
					       nvl((SELECT m.item_name
					             FROM mtl_system_items_vl m
					            WHERE m.item_id = l.item_id),
					           l.item_code) AS require_item_name,
					       (SELECT m.ean_code
					          FROM mtl_system_items_vl m
					         WHERE m.item_id = l.item_id) AS ean_code,
					       (SELECT imv.partner_item_code
					          FROM mtl_item_mapping_vendor_v imv
					         WHERE imv.item_id = l.item_id) AS supply_item_code,
					       (SELECT imv.partner_item_name
					          FROM mtl_item_mapping_vendor_v imv
					         WHERE imv.item_id = l.item_id) AS supply_item_name,
					       l.outside_box_status,
					       (SELECT s.code_value_name
					          FROM sys_code_values_v s
					         WHERE s.code = 'INV_ASN_LINE_OUTSIDE_BOX_STATUS'
					           AND s.code_value = l.outside_box_status) outside_box_status_desc,
					       l.outside_box_quantity,
					       b.packet_quantity,
					       nvl((SELECT vl.uom_desc
					             FROM fnd_uom_codes_vl vl
					            WHERE l.uom_code = vl.uom_code
					              AND vl.business_group = h.owner_business_group),
					           l.uom_code) uom_desc,
					       l.unit_price,
					       b.production_batch,
					       b.environmental_batch,
					       b.packet_weight,
					       b.box_weight,
					       '' country_of_origin_desc,
					       h.owner_business_group,
					       h.owner_company_id,
					       h.coop_business_group,
					       h.coop_company_id,
					       pvv.coop_business_group AS business_group,
					       pvv.coop_company_id AS company_id,
					       'ASN' barcode_type
					  FROM inv_asn_outside_barcode_os o,
					       inv_asn_outside_barcode    b,
					       inv_asn_headers            h,
					       inv_asn_lines              l,
					       pur_line_locations_all     ll,
					       pur_po_relation_vendors    prv,
					       pur_po_rlt_vendor_auth     pva,
					       pur_vendors_v              pvv,
					       pur_headers_all            ph,
					       pur_lines_all              pl
					 WHERE b.asn_outside_barcode_id = o.outside_barcode_id(+)
					   AND b.asn_header_id = h.asn_header_id
					   AND b.asn_line_id = l.asn_line_id
					   AND l.line_location_id = ll.pur_line_location_id
					   AND ll.pur_header_id = prv.pur_header_id
					   AND pva.document_type = 'ASN'
					   AND pva.creation_flag = 'Y'
					   AND prv.po_rltion_vendor_id = pva.po_rltion_vendor_id
					   AND prv.vendor_id = pvv.vendor_id
					   AND ll.pur_line_id = pl.pur_line_id
					   AND ll.pur_header_id = ph.pur_header_id
					UNION ALL
					SELECT o.packing_num,
					       o.packing_quantity,
					       o.record_id,
					       b.pur_outside_barcode_id,
					       b.barcode,
					       '',
					       '',
					       ph.display_po_number po_number,
					       pl.line_num,
					       nvl((SELECT m.display_item_code
					             FROM mtl_system_items_vl m
					            WHERE m.item_id = pl.item_id),
					           pl.item_code) AS require_item_code,
					       nvl((SELECT m.item_name
					             FROM mtl_system_items_vl m
					            WHERE m.item_id = pl.item_id),
					           pl.item_code) AS require_item_name,
					       (SELECT m.ean_code
					          FROM mtl_system_items_vl m
					         WHERE m.item_id = pl.item_id) AS ean_code,
					       (SELECT imv.partner_item_code
					          FROM mtl_item_mapping_vendor_v imv
					         WHERE imv.item_id = pl.item_id) AS supply_item_code,
					       (SELECT imv.partner_item_name
					          FROM mtl_item_mapping_vendor_v imv
					         WHERE imv.item_id = pl.item_id) AS supply_item_name,
					       pl.outside_box_status,
					       (SELECT s.code_value_name
					          FROM sys_code_values_v s
					         WHERE s.code = 'INV_ASN_LINE_OUTSIDE_BOX_STATUS'
					           AND s.code_value = pl.outside_box_status) outside_box_status_desc,
					       pl.outside_box_quantity,
					       b.packet_quantity,
					       nvl((SELECT vl.uom_desc
					             FROM fnd_uom_codes_vl vl
					            WHERE pl.unit_meas_lookup_code = vl.uom_code
					              AND vl.business_group = ph.owner_business_group),
					           pl.unit_meas_lookup_code) uom_desc,
					       pl.unit_price,
					       b.production_batch,
					       b.environmental_batch,
					       b.packet_weight,
					       b.box_weight,
					       c.description country_of_origin_desc,
					       ph.owner_business_group,
					       ph.owner_company_id,
					       ph.coop_business_group,
					       ph.coop_company_id,
					       pvv.coop_business_group AS business_group,
					       pvv.coop_company_id AS company_id,
					       'PUR' barcode_type
					  FROM inv_asn_outside_barcode_os o,
					       pur_outside_barcode        b,
					       pur_headers_all            ph,
					       pur_lines_all              pl,
					       fnd_country_code_vl        c,
					       pur_po_relation_vendors    prv,
					       pur_po_rlt_vendor_auth     pva,
					       pur_vendors_v              pvv
					 WHERE b.pur_outside_barcode_id = o.outside_barcode_id(+)
					   AND b.pur_header_id = ph.pur_header_id
					   AND b.pur_line_id = pl.pur_line_id
					   AND b.pur_header_id = prv.pur_header_id
					   AND prv.po_rltion_vendor_id = pva.po_rltion_vendor_id
					   AND prv.vendor_id = pvv.vendor_id
					   AND pva.document_type = 'ASN'
					   AND pva.creation_flag = 'Y'
					   AND b.country_of_origin = c.country_code(+)
				) v
                      #AUTHORIY_FROM# #WHERE_CLAUSE# #AUTHORIY_WHERE# #ORDER_BY_CLAUSE#
            ]]></bm:query-sql>
        </bm:operation>
        <bm:operation name="insert">
            <bm:update-sql><![CDATA[
    			begin
    			     inv_asn_outside_barcode_pkg.save_outside_barcode_os(p_barcode => ${@barcode},
    			     									p_barcode_type => ${@barcode_type},
                                                      p_packing_num => ${@packing_num},
                                                      p_packing_quantity => ${@packing_quantity},
                                                      p_user_id => ${/session/@user_id});
                end;
    		]]></bm:update-sql>
        </bm:operation>
        <bm:operation name="update">
            <bm:update-sql><![CDATA[
    			begin
    			     inv_asn_outside_barcode_pkg.save_outside_barcode_os(p_barcode => ${@barcode},
    			     									p_barcode_type => ${@barcode_type},
                                                      p_packing_num => ${@packing_num},
                                                      p_packing_quantity => ${@packing_quantity},
                                                      p_user_id => ${/session/@user_id});
                end;
    		]]></bm:update-sql>
        </bm:operation>
    </bm:operations>
    <bm:query-fields>
        <bm:query-field name="barcode" queryExpression="v.barcode like &apos;%&apos;||trim(${@barcode})||&apos;%&apos;"/>
        <bm:query-field name="po_number" queryExpression="v.po_number like &apos;%&apos;||trim(${@po_number})||&apos;%&apos;"/>
        <bm:query-field name="asn_number" queryExpression="v.asn_number like &apos;%&apos;||trim(${@asn_number})||&apos;%&apos;"/>
        <bm:query-field name="asn_detail_number" queryExpression="v.asn_detail_number like &apos;%&apos;||trim(${@asn_detail_number})||&apos;%&apos;"/>
    </bm:query-fields>
    <bm:data-filters>
        <bm:data-filter expression="1=1"/>
        <bm:data-filter expression="v.business_group = ${/session/@business_group} AND v.barcode IS NOT NULL"/>
    </bm:data-filters>
    <authority foundation_code="INV_ASN">
        <authority-segment source_alias="v" source_name="company_id" type="COMPANY"/>
        <authority-segment source_alias="v" source_name="useless_id_1" type="CREATER"/>
        <authority-segment source_alias="v" source_name="useless_id_2" type="RECEIVER"/>
        <authority-segment source_alias="v" source_name="useless_id_3" type="CLIENT"/>
        <authority-segment source_alias="v" source_name="useless_id_4" type="CLIENT_SITE"/>
        <authority-segment source_alias="v" source_name="useless_id_5" type="BUSINESS_UNIT"/>
        <authority-segment source_alias="v" source_name="useless_id_6" type="PUR_ORGANIZATION"/>
        <authority-segment source_alias="v" source_name="useless_id_7" type="INV_ORGANIZATION"/>
        <authority-segment source_alias="v" source_name="useless_id_8" type="SD_ORGANIZATION"/>
        <authority-segment source_alias="v" source_name="useless_id_9" type="VENDOR"/>
        <authority-segment source_alias="v" source_name="useless_id_10" type="VENDOR_SITE"/>
        <authority-segment source_alias="v" source_name="useless_id_11" type="PURHASE_MATERIAL"/>
        <authority-segment source_alias="v" source_name="useless_id_12" type="SALES_PRODUCTION"/>
    </authority>
    <bm:features>
        <s:bm-script><![CDATA[
        	var cx = Packages.aurora.javascript.Context.getCurrentContext();
      		Packages.aurora.plugin.script.engine.ScriptImportor.defineExternScript(cx, this, $ctx.getData(), "fnd_flex_dynamic_tools.js");
          	Packages.aurora.plugin.script.engine.ScriptImportor.defineExternScript(cx, this, $ctx.getData(), "fnd_dynamic_authority.js");
        ]]></s:bm-script>
    </bm:features>
</bm:model>
