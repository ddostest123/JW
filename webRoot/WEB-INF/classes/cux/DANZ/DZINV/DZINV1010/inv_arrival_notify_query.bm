<?xml version="1.0" encoding="UTF-8"?>
<!--
    $Author: shenjun  
    $Date: 2016-11-3 11:02:20 
    $Revision: 1.0  
    $Purpose: 丹姿送货单创建，入口页面数据查询BM（采购订单信息查询）
-->
<bm:model xmlns:s="aurora.plugin.script" xmlns:bm="http://www.aurora-framework.org/schema/bm" defaultOrderBy="v.po_number desc, v.po_line_num, v.line_num">
    <bm:operations>
        <bm:operation name="query">
            <bm:query-sql><![CDATA[
                SELECT
                    rownum AS line_sequence,
                    v.*
                FROM
                    (SELECT
                        t.arrival_notice_id,
                        NVL(t.status, 'NEW') status,
						(SELECT b.code_value_name
						  FROM sys_codes_vl       a,
						       sys_code_values_vl b
						 WHERE a.code_id = b.code_id
						       AND a.code = 'DZ_ARRIVAL_NOTIFY_STATUS'
						       AND b.code_value = NVL(t.status, 'NEW')) AS status_display,
                        t.pur_header_id,
                        t.po_number,
                        t.po_line_num,
                        t.line_num,
                        t.item_id,
                        t.item_code,
                        t.item_name,
                        t.ship_quantity,
                        t.uom_code,
                        t.ship_date,
                        TO_CHAR(t.ship_date, 'YYYY-MM-DD') ship_date_fmt,
                        t.ship_to_org_id,
                        (SELECT
                            io.inv_organization_code
                        FROM
                            inv_organizations_vl io
                        WHERE
                            io.inv_organization_id = t.ship_to_org_id
                        ) AS ship_to_org_code,
                        (SELECT
                            io.description
                        FROM
                            inv_organizations_vl io
                        WHERE
                            io.inv_organization_id = t.ship_to_org_id
                        ) AS ship_to_org_name,
                        t.total_quantity,
                        t.received_quantity,
                        t.version AS revision_num,
                        t.owner_business_group,
                        t.owner_company_id,
                        --t.coop_business_group,
                        --t.coop_company_id,
                        (SELECT pv.coop_company_id
						  FROM pur_headers_all h,
						       pur_vendors       pv
						 WHERE pv.vendor_id = h.vendor_id
						       AND h.pur_header_id = t.pur_header_id
                        ) AS coop_company_id,
                        (SELECT pv.coop_business_group
						  FROM pur_headers_all h,
						       pur_vendors       pv
						 WHERE pv.vendor_id = h.vendor_id
						       AND h.pur_header_id = t.pur_header_id
                        ) AS coop_business_group,
                        (SELECT
                            h.vendor_id
                        FROM
                            pur_headers_all h
                        WHERE
                            h.pur_header_id = t.pur_header_id
                        ) AS vendor_id,
                        (SELECT
                            h.vendor_code
                        FROM
                            pur_headers_all h
                        WHERE
                            h.pur_header_id = t.pur_header_id
                        ) AS vendor_code,
                        (SELECT
                            h.vendor_name
                        FROM
                            pur_headers_all_v h
                        WHERE
                            h.pur_header_id = t.pur_header_id
                        ) AS vendor_name,
                        
                        (SELECT
                            h.company_id
                        FROM
                            pur_headers_all h
                        WHERE
                            h.pur_header_id = t.pur_header_id
                        ) AS company_id,
                        (SELECT
                            h.company_code
                        FROM
                            pur_headers_all h
                        WHERE
                            h.pur_header_id = t.pur_header_id
                        ) AS company_code,
                        (SELECT
                            h.company_name
                        FROM
                            pur_headers_all_v h
                        WHERE
                            h.pur_header_id = t.pur_header_id
                        ) AS company_name,
                       t.attribute1 as line_desc,
                       nvl(t.change_after_ship_flag, 'N') AS change_after_ship_flag,
                       (SELECT nvl(pll.frozen_flag, 'N')  FROM pur_line_locations_all pll WHERE pll.pur_line_location_id = t.pur_line_location_id) AS frozen_flag,
                       (SELECT decode(pll.frozen_flag, 'Y', '是', '否') FROM pur_line_locations_all pll WHERE pll.pur_line_location_id = t.pur_line_location_id) AS frozen_flag_desc,
		               NULL AS useless_id_1,
		               NULL AS useless_id_2,
		               NULL AS useless_id_3,
		               NULL AS useless_id_4,
		               NULL AS useless_id_5,
		               NULL AS useless_id_6,
		               NULL AS useless_id_7,
		               NULL AS useless_id_8,
		               NULL AS useless_id_9,
		               NULL AS useless_id_10
                    FROM
                        dz_inv_arrival_notices t
                    ) v  #WHERE_CLAUSE# #ORDER_BY_CLAUSE# 
            ]]></bm:query-sql>
        </bm:operation>
        <bm:operation name="insert">
            <bm:update-sql><![CDATA[
            	BEGIN
            		dz_inv_asn_pkg.create_inv_asn_line( p_arrival_notice_id => ${@arrival_notice_id},
													    p_asn_header_id     => ${/parameter/@asn_header_id},
													    p_asn_line_num	    => ${@asn_line_num},
													    p_ship_quantity	    => ${@ship_quantity},
													    p_item_batch         => ${@item_batch},
													    p_material_batch     => ${@material_batch},
													    p_pack_specification => ${@pack_specification},
													    p_pack_quantity      => ${@pack_quantity},
													    p_mantissa_quantity  => ${@mantissa_quantity},
													    p_line_comments      => ${@line_comments},
													    p_user_id          => ${/session/@user_id});
            	END;
            ]]></bm:update-sql>
        </bm:operation>
        <bm:operation name="update">
            <bm:parameters>
                <bm:parameter name="asn_header_id" dataType="java.lang.Long" input="true" output="true" outputPath="@asn_header_id"/>
                <bm:parameter name="asn_number" dataType="java.lang.String" input="true" output="true" outputPath="@asn_number"/>
            </bm:parameters>
            <bm:update-sql><![CDATA[
            	BEGIN
            		dz_inv_asn_pkg.create_inv_asn_header(
													    o_asn_header_id            => ${@asn_header_id},
													    o_asn_number            	=> ${@asn_number},
													    p_vendor_id                => ${@vendor_id},
													    p_vendor_code                => ${@vendor_code},
													    p_vendor_name                => ${@vendor_name},
													    p_ship_to_organization_id  => ${@ship_to_org_id},
													    p_ship_to_organization_code  => ${@ship_to_org_code},
													    p_ship_to_organization_name  => ${@ship_to_org_name},
													    p_ship_date                => to_date(${@ship_date}, 'YYYY-MM-DD'),
													    p_pur_header_id			 => ${@pur_header_id},
													    p_po_number			 => ${@po_number},
													    p_contact_name             => ${@contact_name},
													    p_contact_number           => ${@contact_number},
													    p_comments                 => ${@comments},
													    p_ship_address             => ${@ship_address},
													    p_ship_comments            => ${@ship_comments},
													    p_company_id               => ${@coop_company_id},
													    p_business_group           => ${/session/@business_group},
													    p_coop_company_id          => ${@owner_company_id},
													    p_coop_business_group      => ${@owner_business_group},
													    p_user_id                  => ${/session/@user_id});
            	END;
            ]]></bm:update-sql>
        </bm:operation>
        <bm:operation name="execute">
            <bm:update-sql><![CDATA[
            	BEGIN
            		dz_inv_asn_pkg.submit_inv_asn( p_asn_header_id      => ${/parameter/@asn_header_id},
            										p_operate_type		=> ${@operate_type},
												    p_user_id          => ${/session/@user_id});
            	END;
            ]]></bm:update-sql>
        </bm:operation>
    </bm:operations>
    <bm:query-fields>
        <bm:query-field name="po_number" queryExpression="v.po_number like &apos;%&apos;||trim(${@po_number})||&apos;%&apos;"/>
        <bm:query-field name="item_id" queryExpression="v.item_id = ${@item_id}"/>
        <bm:query-field name="item_code" queryExpression="(v.item_code like &apos;%&apos;||trim(${@item_code})||&apos;%&apos; OR v.item_name like &apos;%&apos;||trim(${@item_code})||&apos;%&apos;)"/>
        <bm:query-field name="ship_date_from" queryExpression="v.ship_date &gt;= to_date(${@ship_date_from},&apos;yyyy-mm-dd&apos;)"/>
        <bm:query-field name="ship_date_to" queryExpression="v.ship_date &lt;= to_date(${@ship_date_to},&apos;yyyy-mm-dd&apos;)"/>
        <bm:query-field name="ship_to_org_id" queryExpression="v.ship_to_org_id = ${@ship_to_org_id}"/>
        <bm:query-field name="line_num" queryExpression="v.line_num like &apos;%&apos;||trim(${@line_num})||&apos;%&apos;"/>
        <bm:query-field name="status" queryExpression="v.status = ${@status}"/>
        <bm:query-field name="frozen_flag" queryExpression="((${@frozen_flag} = &apos;Y&apos; and frozen_flag = &apos;N&apos;) or (${@frozen_flag} = &apos;N&apos; and 1=1))"/>
    </bm:query-fields>
    <bm:data-filters>
        <bm:data-filter expression="1=1"/>
        <bm:data-filter expression="v.coop_business_group = ${/session/@business_group}"/>
    </bm:data-filters>
    <!--     <authority foundation_code="INV_ASN">
        <authority-segment source_alias="v" source_name="coop_company_id" type="COMPANY"/>
        <authority-segment source_alias="v" source_name="useless_id_1" type="PUR_BUYER"/>
        <authority-segment source_alias="v" source_name="useless_id_2" type="RECEIVER"/>
        <authority-segment source_alias="v" source_name="useless_id_3" type="CLIENT"/>
        <authority-segment source_alias="v" source_name="useless_id_4" type="CLIENT_SITE"/>
        <authority-segment source_alias="v" source_name="useless_id_5" type="BUSINESS_UNIT"/>
        <authority-segment source_alias="v" source_name="useless_id_6" type="PUR_ORGANIZATION"/>
        <authority-segment source_alias="v" source_name="useless_id_7" type="INV_ORGANIZATION"/>
        <authority-segment source_alias="v" source_name="useless_id_8" type="SD_ORGANIZATION"/>
        <authority-segment source_alias="v" source_name="useless_id_9" type="VENDOR"/>
        <authority-segment source_alias="v" source_name="useless_id_10" type="VENDOR_SITE"/>
        <authority-segment source_alias="v" source_name="useless_id_11" type="PURHASE_MATERIAL"/>
        <authority-segment source_alias="v" source_name="useless_id_12" type="SALES_PRODUCTION"/>
    </authority>
    <bm:features>
        <s:bm-script><![CDATA[
        	var cx = Packages.aurora.javascript.Context.getCurrentContext();
      		Packages.aurora.plugin.script.engine.ScriptImportor.defineExternScript(cx, this, $ctx.getData(), "fnd_flex_dynamic_tools.js");
          	Packages.aurora.plugin.script.engine.ScriptImportor.defineExternScript(cx, this, $ctx.getData(), "fnd_dynamic_authority.js");
        ]]></s:bm-script>
    </bm:features> -->
</bm:model>
