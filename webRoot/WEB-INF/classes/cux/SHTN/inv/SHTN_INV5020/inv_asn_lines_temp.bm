<?xml version="1.0" encoding="UTF-8"?>
<!--
    $Author: wanghaitao  
    $Date: 2014-10-10 下午04:38:31  
    $Revision: 1.0  
    $Purpose: 送货单创建，送货单临时行数据查询BM
-->
<bm:model xmlns:bm="http://www.aurora-framework.org/schema/bm" defaultOrderBy="asn_line_num asc">
    <bm:operations>
        <bm:operation name="query">
            <bm:query-sql><![CDATA[
                SELECT l.asn_line_id,
                	   pla.pur_line_id,
                	   (select count(*) from shtn_inv_asn_boms_temp sb where sb.asn_line_temp_id = l.asn_line_id) asn_pom_count,
				       l.asn_line_num,
				       l.item_id AS require_item_id,
				       l.item_code AS require_item_code,
				       l.item_name AS require_item_name,
				       (SELECT m.used_item_code FROM mtl_system_items_vl m WHERE m.item_id = l.item_id) used_item_code,
				       (SELECT imv.partner_item_id FROM mtl_item_mapping_vendor_v imv WHERE imv.item_id = l.item_id and imv.partner_business_group=${/session/@business_group}) AS supply_item_id,
				       (SELECT imv.partner_item_code FROM mtl_item_mapping_vendor_v imv WHERE imv.item_id = l.item_id and imv.partner_business_group=${/session/@business_group}) AS supply_item_code,
				       (SELECT imv.partner_item_name FROM mtl_item_mapping_vendor_v imv WHERE imv.item_id = l.item_id and imv.partner_business_group=${/session/@business_group}) AS supply_item_name,
				       l.segment1,
				       l.line_num,
				       l.shipment_num,
				       nvl((SELECT ph.display_release_num FROM pur_headers_all ph WHERE ph.pur_header_id = lla.pur_header_id), l.release_num) release_num,
				       l.quantity,
				       l.unit_meas_lookup_code,
				       l.unit_price,
				       (lla.quantity * (1 + nvl(pla.deliver_over,0)/100) - nvl(lla.occupy_quantity,
				                           0)) AS quantity_enable_shipped,
				       (lla.quantity - nvl(lla.occupy_quantity,
				                                  0)) AS default_shipped_quantity,
				       l.ship_quantity,
				       to_char(l.need_by_date,
				               'yyyy-mm-dd') AS need_by_date,
				       to_char(l.promised_date,
				               'yyyy-mm-dd') AS promised_date,
				       l.lots_num,
				       to_char(l.lots_validity_date,
				               'yyyy-mm-dd') lots_validity_date,
				       l.invoice_num,
				       l.serial_num,
				       l.revision_num,
				       l.comments,
				       (SELECT nvl(iio.serial_required_flag,
				                   'N')
				          FROM mtl_item_inv_organization iio
				         WHERE iio.item_id = l.item_id
				               AND iio.inventory_organization_id = lla.ship_to_organization_id) AS serial_required_flag,
				       (SELECT nvl(iio.lot_required_flag,
				                   'N')
				          FROM mtl_item_inv_organization iio
				         WHERE iio.item_id = l.item_id
				               AND iio.inventory_organization_id = lla.ship_to_organization_id) AS lot_required_flag,
				       l.vendor_id,
				       l.asn_header_id,
				       l.session_id,
				       l.copy_flag,
				       l.is_immed_shipped_flag,
		               decode(l.is_immed_shipped_flag,
		                      'Y',
		                      '是') AS is_immed_shipped_flag_display,
		               to_char(l.request_arrival_date,
		                       'yyyy-mm-dd') AS request_arrival_date,
		               l.actual_receiver_code,
		               l.actual_receiver_name,
		               l.contacts_info,
		               l.ship_to_location_address,
		               l.packet_quantity,
		               l.production_batch,
		               l.environmental_batch,
		               l.packet_weight,
		               l.box_weight,
		               l.heat_number,
		               l.reel_number,
		               l.package_number,
		               l.deliver_weight,
		               nvl(l.package_uom_code,
		               (select su.package_uom_code from shtn_fnd_package_uom su where su.item_id = l.item_id
								and su.uom_code = l.unit_meas_lookup_code
								and su.primary_flag = 'Y')) package_uom_code,
		               (SELECT CASE
					         WHEN COUNT(*) > 1 THEN
					          'Y'
					         ELSE
					          'N'
					       END
					  FROM inv_asn_lines ial,inv_asn_headers iah
					 WHERE ial.asn_header_id = iah.asn_header_id
					 	   and ial.heat_number IS NOT NULL
					       and nvl(ial.cancel_flag,'N') = 'N'
					       and nvl(ial.close_flag,'') = 'N'
					       and iah.owner_business_group = ${/session/@business_group}
					       AND ial.heat_number = l.heat_number
					       and ial.heat_number <> 'N/A') heat_repeat_flag,
		               (select pla.ean_code from pur_lines_all pla where pla.pur_line_id=lla.pur_line_id) as ean_code,
		               (select pla.line_desc from pur_lines_all pla where pla.pur_line_id=lla.pur_line_id) as line_desc,
		               (SELECT COUNT(*)
				          FROM shtn_fnd_vendor_items si
				         WHERE si.item_id = l.item_id and si.vendor_id = l.vendor_id
				               AND si.enabled_flag = 'Y') vendor_item_count
				  FROM pur_line_locations_all lla,
				       inv_asn_lines_temp     l,
				       pur_lines_all pla
				 WHERE lla.pur_line_location_id = l.pur_line_location_id
				 	   and pla.pur_line_id = lla.pur_line_id
				       AND l.session_id = ${/session/@session_id}
				       AND l.asn_header_id = ${/parameter/@asn_header_id}
				#ORDER_BY_CLAUSE#
            ]]></bm:query-sql>
        </bm:operation>
        <bm:operation name="update">
            <bm:query-sql><![CDATA[
                BEGIN
                	inv_asn_basic_pkg.modify_inv_asn_lines_temp(p_asn_line_id 			=> ${@asn_line_id},
			                  								 	p_ship_quantity      	=> ${@ship_quantity},
			                               					 	p_comments          	=> ${@comments},
			                               					 	p_lots_num           	=> ${@lots_num},
			                               					 	p_lots_validity_date	=> to_date(${@lots_validity_date},'yyyy-mm-dd'),
			                               					 	p_invoice_num        	=> ${@invoice_num},
			                               					 	p_serial_num         	=> ${@serial_num},
			                               					 	p_copy_flag		  		=> ${@copy_flag},
			                               					 	p_asn_line_num		  	=> ${@asn_line_num},
			                               					 	p_request_arrival_date	=> to_date(${@request_arrival_date},'yyyy-mm-dd'),
			                               					 	p_contacts_info			=> ${@contacts_info},
			                               					 	p_packet_quantity		=> ${@packet_quantity},
			                               					 	p_production_batch		=> ${@production_batch},
			                               					 	p_environmental_batch	=> ${@environmental_batch},
			                               					 	p_packet_weight			=> ${@packet_weight},
			                               					 	p_box_weight			=> ${@box_weight},
															    p_heat_number           => ${@heat_number},
															    p_reel_number           => ${@reel_number},
															    p_package_number        => ${@package_number}, 
    															p_deliver_weight        => ${@deliver_weight},
    															p_package_uom_code      => ${@package_uom_code},
							                                 	p_user_id 				=> ${/session/@user_id});
                END;
            ]]></bm:query-sql>
        </bm:operation>
        <bm:operation name="delete">
            <bm:query-sql><![CDATA[
                BEGIN
                	inv_asn_basic_pkg.delete_inv_asn_line_temp(p_asn_line_id	=> ${@asn_line_id},
				                                  	   		   p_user_id  		=> ${/session/@user_id});
                END;
            ]]></bm:query-sql>
        </bm:operation>
        <bm:operation name="execute">
            <bm:parameters>
                <bm:parameter name="last_flag" dataType="java.lang.String" input="false" output="true" outputPath="@last_flag"/>
            </bm:parameters>
            <bm:query-sql><![CDATA[
                BEGIN
                  inv_asn_pkg.submit_inv_asn_headers(p_asn_header_id 	=> ${@asn_header_id},
                  									 p_asn_type_code	=> ${@asn_type_code},
				                                     p_business_group	=> ${/session/@business_group},
				                                     p_session_id 		=> ${/session/@session_id},
				                                     p_user_id 			=> ${/session/@user_id},
				                                     x_last_flag 		=> ${@last_flag});
                END;
            ]]></bm:query-sql>
        </bm:operation>
        <bm:operation name="insert">
            <bm:parameters>
                <bm:parameter name="last_flag" dataType="java.lang.String" input="false" output="true" outputPath="@last_flag"/>
            </bm:parameters>
            <bm:query-sql><![CDATA[
                BEGIN
                  inv_asn_pkg.create_inv_asn_headers(p_asn_header_id 	=> ${@asn_header_id},
                  									 p_asn_type_code	=> ${@asn_type_code},
				                                     p_business_group	=> ${/session/@business_group},
				                                     p_session_id 		=> ${/session/@session_id},
				                                     p_user_id 			=> ${/session/@user_id},
				                                     x_last_flag 		=> ${@last_flag});
                END;
            ]]></bm:query-sql>
        </bm:operation>
    </bm:operations>
</bm:model>
