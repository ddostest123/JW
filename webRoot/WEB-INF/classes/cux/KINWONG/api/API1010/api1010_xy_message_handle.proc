<?xml version="1.0" encoding="UTF-8"?>
<p:procedure xmlns:rs="aurora.database.rsconsumer" xmlns:p="uncertain.proc" xmlns:a="http://www.aurora-framework.org/application" xmlns:s="aurora.plugin.script" trace="true">
      <a:model-query fetchAll="true" model="cux.KINWONG.api.API1010.api1010_xy_message_handle" rootPath="message"/>
        <s:server-script import="request.js"><![CDATA[
            var handle_message = $ctx.model.getChild('message').getChildren();
            var bm = new ModelService('cux.KINWONG.api.PUBLIC.api_get_request_all');
            var status;
            var message;
            function xy_detail(sku) {
                $ctx.parameter.api_code = 'XY_PRODUCT_DETAIL_MS';
                var record = bm.queryAsMap();
                var arr = record.getChildren()[0];
                log(arr.toXML());
                var para_str = arr.REQUEST_DATA + sku + '"}';
                if (arr.API_URL) {
                    request({
                        url: arr.API_URL,
                        para: para_str,
                        success: function(args) {
                            var rec = {
                                'history_id': arr.HISTORY_ID,
                                'url': arr.API_URL,
                                'config_id': arr.CONFIG_ID,
                                'api_id': arr.API_ID,
                                'request_data': JSON.stringify(para_str),
                                'response_data': args
                            };
                            $bm("api.PUBLIC.api_exec_process").insert(rec);
                            var data = JSON.parse(args);
                            if (data['success'] == true) {
                                run_fun(data, arr);
                            }
                        },
                        failure: function(args) {
                            raise_app_error(args.error.message);
                        }
                    });
                }
            }
            
            function xy_price(sku) {
                $ctx.parameter.api_code = 'XY_SELL_PRICE_MS';
                var record = bm.queryAsMap();
                var arr = record.getChildren()[0];
                var para_str = arr.REQUEST_DATA + sku + '"]}';
                if (arr.API_URL) {
                    request({
                        url: arr.API_URL,
                        para: para_str,
                        success: function(args) {
                            var rec = {
                                'history_id': arr.HISTORY_ID,
                                'url': arr.API_URL,
                                'config_id': arr.CONFIG_ID,
                                'api_id': arr.API_ID,
                                'request_data': JSON.stringify(para_str),
                                'response_data': args
                            };
                            $bm("api.PUBLIC.api_exec_process").insert(rec);
                            var data = JSON.parse(args);
                            if (data['success'] == true) {
                                run_fun(data, arr);
                            }
                        },
                        failure: function(args) {
                            raise_app_error(args.error.message);
                        }
                    });
                }
            }
            
            function xy_order_checked(record, page) {
                var message = '';
                var check_response;
                var total_page;
                $ctx.parameter.config_code = 'XY_ORDER_CHECKED';
                var res5 = bm.queryAsMap();
                var arr5 = res5.getChildren()[0];
                var check_para = {
                    token: arr5.ACCESS_TOKEN,
                    date: record.check_date,
                    page: page
                }
                var orders;
                try {
                    request({
                        url: arr5.URL,
                        para: JSON.stringify(check_para),
                        success: function(args) {
                            println(JSON.stringify(args.result.orders));
                            if (args.success == true && args.resultCode == '0000') {
                                total_page = args.result.totalPage;
                                orders = args.result.orders;
                            } else if (args.resultCode == '2007') {
                                message = (args.resultCode);
                            } else {
                                message = (args.resultMessage);
                            }
                        },
                        failure: function(args) {
                            raise_app_error(args.error.message);
                        }
                    });
                } catch (e) {
                    status = 'failure';
                    message = e.message;
                    result = null;
                    var orders = null;
                    total_page = page;
                } finally {
                    println(status);
                    if (message) {
                        raise_app_error(message.substring(47));
                    } else {
                        println(JSON.stringify(orders));
                        for (d = 0;d < orders.length;d++) {
                            var check_para = {
                                date: record.check_date,
                                invoice_state: orders[d].invoiceState,
                                orderId: orders[d].orderId,
                                state: orders[d].state,
                                hang_up_state: orders[d].hangUpState,
                                order_price: orders[d].orderPrice,
                            }
                            $bm("cux.KINWONG.api.API1010.api1010_xy_message_handle").execute(check_para);
                        }
                        if (total_page > 1) {
                            for (e = 1;e < total_page;e++)
                            xy_order_checked(record, e)
                        }
                    }
                }
            }
            
            function order_info_query(order_id, type) {
                var bm_n = new ModelService('xy.api_get_url_token');
                $ctx.parameter.config_code = 'XY_ORDER_QUERY';
                var res_n = bm_n.queryAsMap();
                var arr_n = res_n.getChildren()[0];
                var para_str = '{"token":"' + arr_n.ACCESS_TOKEN + '","orderId":"' + order_id + '"}'
                var message;
                var result
                println('info' + arr_n.URL);
                println('info' + para_str);
                try {
                    request({
                        url: arr_n.URL,
                        para: para_str,
                        success: function(args) {
                            println('info' + JSON.stringify(args));
                            if (args.success == true) {
                                result = args.result;
                                message = null;
                            } else {
                                raise_app_error(args.resultMessage);
                            }
                        },
                        failure: function(args) {
                            raise_app_error(args.error.message);
                        }
                    });
                } catch (e) {
                    status = 'failure';
                    message = e.message;
                    result = null;
                } finally {
                    if (message) {
                        raise_app_error(message.substring(47));
                    } else {
                        if (type == 9) {
                            var p_order_herders = {
                                pur_header_id: null,
                                display_po_number: null,
                                eb_order_id: result.orderId,
                                parent_eb_order_id: 0,
                                data_source: 'XY',
                                freight: result.baseFreight || 0,
                                total_amount: result.orderPrice,
                                naked_amount: result.orderNakedPrice,
                                tax_amount: result.orderTaxPrice,
                                type: result.type,
                                split_flag: 'N',
                                split_date: null,
                                delivered_flag: 'N',
                                delivered_date: null,
                                bill_flag: 'N',
                                bill_date: null,
                                user_id: 1
                            }
                            $bm("cux.KINWONG.api.API1010.api1010_xy_message_handle_n").update(p_order_herders);
                            var skus = result.sku;
                            for (m = 0;m < skus.length;m++) {
                                var line_para = {
                                    eb_order_id: result.orderId,
                                    skuid: skus[m].skuId,
                                    name: skus[m].name,
                                    category: skus[m].category,
                                    quantity: skus[m].quantity,
                                    price: skus[m].price,
                                    naked_price: skus[m].nakedPrice,
                                    tax: skus[m].tax,
                                    type: skus[m].type,
                                    user_id: 1
                                }
                                $bm("cux.KINWONG.api.API1010.api1010_xy_message_handle_n").execute(line_para);
                            }
                            var c_inv_asn_para = {
                                p_order_id: result.orderId,
                                c_order_id: null,
                                data_source: 'XY'
                            }
                            $bm("cux.KINWONG.api.API1010.api1010_xy_message_handle_n").delete(c_inv_asn_para);
                        }
                    }
                }
            }
            
            function message_last_status(message, id) {
                if (message) {
                    if (message == '2007') {
                        var start_para = {
                            id: id,
                            handle_status: 'NEW',
                            error_msg: ''
                        }
                        $bm("cux.KINWONG.api.API1010.api1010_xy_message_handle").update(start_para);
                    } else if (message == 'aurora.plugin.script.engine.InterruptException: ����Ʒ������') {
                        var last_para = {
                            id: id,
                            handle_status: 'HANDLED',
                            error_msg: ''
                        };
                        $bm("cux.KINWONG.api.API1010.api1010_xy_message_handle").update(last_para);
                    } else {
                        var last_para = {
                            id: id,
                            handle_status: 'ERROR',
                            error_msg: message
                        };
                        $bm("cux.KINWONG.api.API1010.api1010_xy_message_handle").update(last_para);
                    }
            
                } else {
                    var last_para = {
                        id: id,
                        handle_status: 'HANDLED',
                        error_msg: ''
                    };
                    $bm("cux.KINWONG.api.API1010.api1010_xy_message_handle").update(last_para);
                }
            }
            
            if (handle_message.length) {
                for (i = 0;i < handle_message.length;i++) {
                    var record = handle_message[i];
                    var start_para = {
                        id: record.id,
                        handle_status: 'HANDLEING',
                        error_msg: ''
                    }
                    $bm("cux.KINWONG.api.API1010.api1010_xy_message_handle").update(start_para);
                    if (record.type == 5) {
                        var result6 = JSON.parse(record.result);
                        message = '';
                        var page = {
                            ordertype: result6.orderType,
                            orderid: result6.orderId,
                            state: result6.state
                        };
                        $bm("cux.KINWONG.api.API1010.api1010_xy_order_check").update(page);
                        message_last_status(message, record.id);
                    } else if (record.type == 2) {
                        message = '';
                        try {
                            var result2 = JSON.parse(record.result);
                            xy_price(result2.skuId);
                        } catch (e) {
                            status = 'failure';
                            message = e.message;
                            result = false;
                        } finally {
                            message_last_status(message, record.id);
                        }
                    } else if (record.type == 4) {
                        message = '';
                        try {
                            var result4 = JSON.parse(record.result);
                            $bm("cux.KINWONG.api.API1010.api1010_xy_message_handle").delete(result4);
                        } catch (e) {
                            status = 'failure';
                            message = e.message;
                            result = false;
                        } finally {
                            message_last_status(message, record.id);
                        }
                    } else if (record.type == 6) {
                        message = '';
                        var result6 = JSON.parse(record.result);
                        try {
                            if (result6.state == 1) {
                                xy_detail(result6.skuId);
                                xy_price(result6.skuId);
                                var page = {
                                    sku: result6.skuId,
                                    page_num: result6.page_num,
                                    type: 1
                                }
                                $bm("cux.KINWONG.api.API1010.api1010_xy_message_handle_page").update(page);
                            } else if (result6.state == 2) {
                                var page = {
                                    sku: result6.skuId,
                                    page_num: result6.page_num,
                                    type: 2
                                }
                                $bm("cux.KINWONG.api.API1010.api1010_xy_message_handle_page").update(page);
                            }
                        } catch (e) {
                            status = 'failure';
                            message = e.message;
                            result = false;
                        } finally {
                            message_last_status(message, record.id);
                        }
                    } else if (record.type == 101) {
                        message = '';
                        var result101 = JSON.parse(record.result);
                        var page = {
                            eb_order_number: result101.orderId,
                            package_number: result101.packageId
                        }
                        $bm("cux.KINWONG.api.API1010.api1010_xy_message_handle_101").insert(page);
                        message_last_status(message, record.id);
                    } else if (record.type == 16) {
                        message = '';
                        try {
                            //println(record.result);
                            var result16 = JSON.parse(record.result);
                            xy_detail(result16.skuId);
                        } catch (e) {
                            status = 'failure';
                            message = e.message;
                            result = false;
                        } finally {
                            message_last_status(message, record.id);
                        }
                    }
                    // else if (record.type == 9) {
                    // message = '';
                    // try {
                    // var result9 = JSON.parse(record.result);
                    // if (result9.length) {
                    // for (var t = 0;t < result9.length;t++) {
                    // order_info_query(result9[t].orderId, 9);
                    // var invoice_pa = {
                    // eb_order_id: result9[t].orderId,
                    // data_sourse: 'XY'
                    // };
                    // $bm("xy.api_pur_auto_confiem").update(invoice_pa);
                    // }
                    // } else {
                    // order_info_query(result9.orderId, 9);
                    // var invoice_pa = {
                    // eb_order_id: result9.orderId,
                    // data_sourse: 'XY'
                    // };
                    // $bm("xy.api_pur_auto_confiem").update(invoice_pa);
                    // }
            
                    // } catch (e) {
                    // status = 'failure';
                    // message = e.message;
                    // result = false;
                    // } finally {
                    // message_last_status(message, record.id);
                    // }
                    // } else if (record.type == 10) {
                    // message = '';
                    // try {
                    // var result10 = JSON.parse(record.result);
                    // var can_para = {
                    // orderid: result10.orderId,
                    // data_sourse: 'XY'
                    // }
                    // $bm("xy.xy_req_order_query").delete(can_para);
                    // } catch (e) {
                    // status = 'failure';
                    // message = e.message;
                    // result = false;
                    // } finally {
                    // message_last_status(message, record.id);
                    // }
                    // }
                }
            } else {
                log('no message to handle!');
            }
        ]]></s:server-script>
         <p:echo/>
</p:procedure>
