<?xml version="1.0" encoding="UTF-8"?>
<!--
    $Author: LIBIN  
    $Date: 2014-10-27 上午11:25:49  
    $Revision: 1.0  
    $Purpose: 
-->
<a:service xmlns:p="uncertain.proc" xmlns:a="http://www.aurora-framework.org/application" xmlns:s="aurora.plugin.script" trace="true">
    <a:init-procedure>
        <a:model-query defaultWhereClause="v.rfx_header_id = ${/parameter/@rfx_header_id}" fetchAll="true" model="cux.MOR.pur.PUR7110.pur_rfx_parity_excel" rootPath="head_data"/>
        <a:model-query defaultWhereClause="p.rfx_header_id = ${/parameter/@rfx_header_id}" fetchAll="true" model="cux.MOR.pur.PUR7110.pur_rfx_parity_excel_line" rootPath="line_data"/>
        <s:server-script import="pur_rfx_parity_excel.js"><![CDATA[
            importClass(java.io.File);
            importClass(java.io.FileOutputStream);
            importPackage(java.lang);
            
            importClass(javax.servlet.http.HttpServlet);
            importClass(javax.servlet.http.HttpServletRequest);
            importClass(Packages.aurora.service.ServiceInstance);
            
            importClass(org.apache.poi.hssf.usermodel.HSSFCell);
            importClass(org.apache.poi.hssf.usermodel.HSSFCellStyle);
            importClass(org.apache.poi.hssf.usermodel.HSSFDataFormat);
            importClass(org.apache.poi.hssf.usermodel.HSSFRow);
            importClass(org.apache.poi.hssf.usermodel.HSSFSheet);
            importClass(org.apache.poi.hssf.usermodel.HSSFWorkbook);
            importClass(org.apache.poi.hssf.util.Region);
            importClass(org.apache.poi.hssf.usermodel.HSSFFont);
            importClass(org.apache.poi.ss.util.RegionUtil);
            importClass(org.apache.poi.hssf.util.HSSFColor);
            
            var parameter = $ctx.parameter;
            var styleArray = [];
            var sheetdataNum1 = 0,
                sheetdataNum2 = 0;
            var head_datas = $ctx.model.getChild("head_data").getChildren();
            var line_datas = $ctx.model.getChild("line_data").getChildren();
            var coop_datas = [],
                //封装gruop by后供应商数据json格式，将物料信息已json格式封装到此数据数据下
                item_datas = [],
                //封装gruop by后物料信息，
                total_datas = [],
                //封装合计信息，中标信息
                supposed_datas = []; //封装拼接字段
            
            //根据查询出的数据修改json格式的数据
            
            function dataModify() {
                //取值-头部excel-sheet1数据封装
                dataForInSelect(excelContent1, head_datas);
                dataForInSelect(excelContent3, line_datas);
                //供应商数据--供应商group by
                getGroupByCoop();
                dataForInSelect(sycTableTile, coop_datas);
                //供应商价格数据
                dataForInCreate(sycTableContent, sheet2Tile, line_datas);
                //合计取值
                getTotalData();
                dataForInSelect(sycTableFoot, total_datas);
                dataForInSelect(sheet2Foot, total_datas);
                //取供应商中标合计值
                dataForInSelect(excelContent2, total_datas);
                dataForInSelect(sheet2Foot2, total_datas);
                //尾部数据，
                dataForInSelect(excelContent2, line_datas);
                //拼接中标供应商，和申请人
                getStrData();
                dataForInSelect(excelContent2, supposed_datas);
            
            }
            
            function dataForInSelect(datas, query_data) {
                for (var i = 0;i < datas.length;i++) {
                    if ( !! datas[i].name) {
                        datas[i].content = getNameValue(query_data, datas[i].name, datas[i].queryType);
                    }
                }
            }
            
            function dataForInCreate(datas, datasFull, query_data) {
                var rowIndex1 = 6,
                    rowIndex2 = 2,
                    index;
                var flag = false;
                for (var i = 0;i < query_data.length;i++) {
                    flag = false;
                    for (var j = 0;j < item_datas.length;j++) {
                        if (item_datas[j].item_desc == query_data[i].item_desc) {
                            flag = true;
                            break;
                        }
                    }
                    if (flag) {
                        continue;
                    }
                    //sheet1页的供应商报价信息，最多取四行(rowIndex1初始为6)
                    if (rowIndex1 <= 9) {
                        createCoopLineData(datas, rowIndex1, query_data[i]);
                        //供应商报价横向扩展
                        for (index = 0;index < 3;index++) {
                            var content1 = '',
                                content2 = '';
                            //横向扩展的少于三个供应商时自动填补空格
                            if (index < coop_datas.length) {
                                content1 = coop_datas[index].item[i].valid_fb_retail_price;
                                content2 = coop_datas[index].item[i].total_price;
                            }
                            dataPushJson(datas, rowIndex1, [rowIndex1, 8 + (index * 2), rowIndex1, 8 + (index * 2)], content1);
                            dataPushJson(datas, rowIndex1, [rowIndex1, 9 + (index * 2), rowIndex1, 9 + (index * 2)], content2);
                        }
                        rowIndex1++;
                    }
                    //sheet页2的供应商报价信息不做限制
                    createCoopLineData(datasFull, rowIndex2, query_data[i]);
                    //供应商报价横向扩展
                    for (index = 0;index < coop_datas.length;index++) {
                        dataPushJson(datasFull, rowIndex2, [rowIndex2, 8 + (index * 2), rowIndex2, 8 + (index * 2)], coop_datas[index].item[i].valid_fb_retail_price);
                        dataPushJson(datasFull, rowIndex2, [rowIndex2, 9 + (index * 2), rowIndex2, 9 + (index * 2)], coop_datas[index].item[i].total_price);
                    }
                    rowIndex2++;
                    item_datas.push({
                        item_desc: query_data[i].item_desc,
                        item_count: query_data[i].need_quantity,
                        total_price: getValue(query_data[i].total_cost, 0),
                        total_allotted: getValue(query_data[i].total_cost, 0)
                    });
                }
                sheetdataNum1 = rowIndex1 - 7;
                sheetdataNum2 = rowIndex2 - 3;
            }
            
            function createCoopLineData(datas, rowIndex, queryData) {
                dataPushJson(datas, rowIndex, [rowIndex, 0, rowIndex, 0], queryData.line_num);
                dataPushJson(datas, rowIndex, [rowIndex, 1, rowIndex, 1], queryData.samples_requested);
                dataPushJson(datas, rowIndex, [rowIndex, 2, rowIndex, 2], queryData.item_desc);
                dataPushJson(datas, rowIndex, [rowIndex, 3, rowIndex, 3], queryData.specification);
                dataPushJson(datas, rowIndex, [rowIndex, 4, rowIndex, 4], queryData.uom_code);
                dataPushJson(datas, rowIndex, [rowIndex, 5, rowIndex, 5], queryData.need_quantity);
                dataPushJson(datas, rowIndex, [rowIndex, 6, rowIndex, 6], queryData.cost_price);
                dataPushJson(datas, rowIndex, [rowIndex, 7, rowIndex, 7], getValue(queryData.total_cost, '0'));
            }
            
            function dataPushJson(array, rowIndex, place, content) {
                array.push({
                    row: rowIndex,
                    place: place,
                    content: getValue(content, ''),
                    style: 2
                });
            }
            
            function getNameValue(datas, name, queryType) {
                if (queryType == 'F') {
                    if (datas.length == 0) {
                        return '';
                    }
                    return getValue(datas[0][name], '');
                } else if (queryType == 'P') {
                    var value = '';
                    for (var i = 0;i < datas.length;i++) {
                        value += getValue(datas[i][name], '') + (i == (datas.length - 1)) ? '' : '-';
                    }
                    return value;
                } else if (queryType == 'P3') {
                    var value = '';
                    for (var i = 0;i < datas.length;i++) {
                        value += getValue(datas[i][name], '');
                         value +=(i == (datas.length - 1)) ? '' : '-'
                    }
                    return value;
                } else if (queryType == 'P4') {
                    var value = '￥';
                    var num =0;
                    for (var i = 0;i < datas.length;i++) {
                        num +=datas[i][name];
                    }
                    value= value+num
                    return value;
                } else if (typeof(queryType) == 'number') {
                    if (datas.length <= queryType) {
                        return '';
                    }
                    return getValue(datas[queryType][name], '');
                }
            }
            
            function getValue(value, nullValue) {
                if (typeof(value) == 'undefined' || value == '') {
                    return nullValue;
                }
                return String(value);
            }
            
            function getGroupByCoop() {
                var flag = false,
                    index = 0;
                for (var i = 0;i < line_datas.length;i++) {
                    flag = false;
                    for (var j = 0;j < coop_datas.length;j++) {
                        if (coop_datas[j].coop_company_desc == line_datas[i].coop_company_desc) {
                            flag = true;
                            index = j;
                            break;
                        }
                    }
                    if (!flag) {
                        coop_datas.push({
                            coop_company_desc: line_datas[i].coop_company_desc,
                            unit_price: '单价',
                            total_price: '价格',
                            proposed_flag: line_datas[i].proposed_flag,
                            item: [{
                                item_code: line_datas[i].item_code,
                                valid_fb_retail_price: line_datas[i].valid_fb_retail_price,
                                total_price: line_datas[i].total_price,
                                suggested_flag: line_datas[i].suggested_flag
                            }]
            
                        });
                        //封装供应商明细,供应商名称，-单价-价格，
                        var column = sheet2Tile[sheet2Tile.length - 1].place[3] + 1;
                        dataPushJson(sheet2Tile, 0, [0, column, 0, column + 1], line_datas[i].coop_company_desc);
                        dataPushJson(sheet2Tile, 1, [1, column, 1, column], '单价');
                        dataPushJson(sheet2Tile, 1, [1, column + 1, 1, column + 1], '价格');
                    } else {
                        coop_datas[index].item.push({
                            item_code: line_datas[i].item_code,
                            valid_fb_retail_price: line_datas[i].valid_fb_retail_price,
                            total_price: line_datas[i].total_price,
                            suggested_flag: line_datas[i].suggested_flag
                        });
                    }
                }
            }
            
            function getTotalData() {
                var item_count = 0,
                    ob1 = new Object(),
                    ob2 = new Object();
                item_sum = 0, suggest_sum = 0, suggest_total = 0;
                for (var i = 0;i < item_datas.length;i++) {
                    item_sum += item_datas[i].total_price;
                    item_count += item_datas[i].item_count;
                }
                //供应商报价统计
                ob1.total_count = item_count;
                ob1.total_price = String(item_sum);
                //供应商中标合计
                ob2.total_price = 0;
                for (i = 0;i < coop_datas.length;i++) {
                    item_sum = 0, suggest_sum = 0;
                    for (var j = 0;j < coop_datas[i].item.length;j++) {
                        item_sum += coop_datas[i].item[j].total_price;
                        suggest_sum += (coop_datas[i].item[j].suggested_flag == 'Y') ? coop_datas[i].item[j].total_price : 0;
                    }
                    ob1['total_vendor' + i] = item_sum;
                    ob2['total_vendor' + i] = '采购总计:' + suggest_sum;
                    suggest_total += suggest_sum;
                    //sheet2横向扩展供应商报价合计，中标合计
                    var column = sheet2Foot[sheet2Foot.length - 1].place[3];
                    dataPushJson(sheet2Foot, 3, [3, column + 1, 3, column + 2], item_sum);
                    column = sheet2Foot2[sheet2Foot2.length - 1].place[3];
                    dataPushJson(sheet2Foot2, 4, [4, column + 1, 4, column + 2], '采购总计:' + suggest_sum);
                }
                total_datas.push(ob1);
                total_datas.push(ob2);
                total_datas[1].total_price = String('采购总计:' + suggest_total);
            }
            
            function getStrData() {
                var vendor_name_all = '';
                for (var i = 0;i < coop_datas.length;i++) {
                    if (coop_datas[i].proposed_flag == 'Y') {
                        vendor_name_all += '-' + coop_datas[i].coop_company_desc;
                    }
                }
                supposed_datas.push({
                    vendor_name_all: '同意供应商：【' + vendor_name_all + '】、具体见附件；\n张建新:同意      李道全:同意      杨加峰:同意      刘剑:      【所有审批人、审批意见拼接】'
                });
            }
            
            //设置路径
            
            function createFilePath() {
                var context = $ctx.getData();
                var serviceInstance = ServiceInstance.getInstance(context);
                var request = serviceInstance.getRequest();
                var file = request.getSession().getServletContext().getRealPath(File.separator);
                //文档保存路径
                parameter.filePath = 'ueditor-jsp/jsp/upload/file/PUR7110/workbook.xls';
                parameter.fileRoute = file + parameter.filePath;
                parameter.fileLoad = file + 'ueditor-jsp/jsp/upload/file/PUR7110';
                var dirFile = new File(parameter.fileLoad);
                if (!dirFile.exists()) {
                    dirFile.mkdir();
                }
            }
            
            function ceateStyle(wb, fontSize, bold, textAlign, border, fontColor) {
                //创建样式
                var style = wb.createCellStyle(); // 样式对象
                style.setVerticalAlignment(HSSFCellStyle.VERTICAL_CENTER); // 垂直
                style.setAlignment(textAlign);
                style.setWrapText(true);
                if (border) {
                    style.setBorderTop(1);
                    style.setBorderBottom(1);
                    style.setBorderRight(1);
                    style.setBorderLeft(1);
                }
                //设置字体
                var font = wb.createFont();
                //设置字体样式
                font.setFontHeightInPoints(fontSize);
                font.setFontName("宋体");
                if (bold) {
                    font.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD);
                }
                font.setColor(fontColor);
                font.setItalic(false);
                style.setFont(font);
                styleArray.push(style);
                return style;
            }
            
            function createExcel() {
                //取值
                dataModify();
                //设置路径
                createFilePath();
                //创建excel文件，并填充内容
                var wb = new HSSFWorkbook();
                var sheet1 = wb.createSheet('比价表');
                sheet1.setDisplayGridlines(false);
                //创建样式1
                var styleHead = ceateStyle(wb, 18, true, HSSFCellStyle.ALIGN_CENTER, true, HSSFColor.BLACK.index);
                var styleTitle = ceateStyle(wb, 10, true, HSSFCellStyle.ALIGN_CENTER, true, HSSFColor.BLACK.index);
                var styleValue = ceateStyle(wb, 10, false, HSSFCellStyle.ALIGN_CENTER, true, HSSFColor.BLACK.index);
                var styleTitleL = ceateStyle(wb, 10, false, HSSFCellStyle.ALIGN_LEFT, true, HSSFColor.BLACK.index);
                var styleFont1 = ceateStyle(wb, 16, false, HSSFCellStyle.ALIGN_CENTER, true, HSSFColor.BLACK.index);
                var styleNullBorder = ceateStyle(wb, 10, false, HSSFCellStyle.ALIGN_LEFT, false, HSSFColor.BLACK.index);
                var styleNullBorderRed = ceateStyle(wb, 10, false, HSSFCellStyle.ALIGN_LEFT, false, HSSFColor.RED.index);
                var styleFont2 = ceateStyle(wb, 12, true, HSSFCellStyle.ALIGN_CENTER, true, HSSFColor.BLACK.index);
                sheet1.setDefaultRowHeight(350);
                /*
                 **渲染sheet页1
                 **sheet页为'比价表'
                 **创建新的sheet需要初始化sheetdataNum1=0
                 */
                sheet1 = createContentArray(excelContent1, sheet1, wb);
                sheet1 = createContentArray(excelContent3, sheet1, wb);
                //渲染动态数据列
                sheet1 = createContentArray(sycTableTile, sheet1, wb);
                //渲染列数据
                sheet1 = createContentArray(sycTableContent, sheet1, wb);
                //渲染尾部
                sheet1 = createContentArray(sycTableFoot, sheet1, wb, true, sheetdataNum1);
                //其余内容2
                sheet1 = createContentArray(excelContent2, sheet1, wb, true, sheetdataNum1);
                /*
                 **渲染sheet页2
                 **sheet页为'比价明细'
                 **创建新的sheet需要初始化sheetdataNum2=0
                 */
                var sheet2 = wb.createSheet('比价明细');
                sheet2.setDefaultRowHeight(300);
                //sheet2的标题
                sheet2 = createContentArray(sheet2Tile, sheet2, wb);
                //sheet2的数据
                sheet2 = createContentArray(sheet2Data, sheet2, wb);
                //sheet2的尾部
                sheet2 = createContentArray(sheet2Foot, sheet2, wb, true, sheetdataNum2);
                sheet2 = createContentArray(sheet2Foot2, sheet2, wb, true, sheetdataNum2);
                //保存文件
                var fileOut = new FileOutputStream(parameter.fileRoute);
                wb.write(fileOut);
            }
            
            function createContentArray(array, sheet1, wb, lineSycFlag, sheetdataNum) {
                var rowIndex = -1,
                    row, cellIndex = 0;
                for (var i = 0;i < array.length;i++) {
                    //确定行数
                    if (lineSycFlag) {
                        array[i].row += sheetdataNum;
                        array[i].place[0] += sheetdataNum;
                        array[i].place[2] += sheetdataNum;
                    }
                    //创建行
                    if (array[i].row != rowIndex) {
                        row = selectRows(array[i].row, sheet1);
                        rowIndex = array[i].row;
                    }
                    cellIndex = array[i].place[1];
                    sheet1.addMergedRegion(new Region(array[i].place[0], array[i].place[1], array[i].place[2], array[i].place[3]));
                    var cell1 = row.createCell(cellIndex);
                    cell1.setCellStyle(styleArray[array[i].style]);
                    createBoderComplete(sheet1, array[i], wb);
                    cell1.setCellValue(array[i].content);
                    if ( !! array[i].columnWidth) {
                        sheet1.setColumnWidth(cellIndex, array[i].columnWidth * 256);
                    }
                }
                return sheet1;
            }
            
            function selectRows(index, sheet) {
                var row = sheet.getRow(index);
                if (row == null) {
                    row = sheet.createRow(index);
                }
                return row;
            }
            //单元格边框问题
            
            function createBoderComplete(sheet, data, wb) {
                for (var i = data.place[0];i <= data.place[2];i++) {
                    var row = sheet.getRow(i);
                    if (row == null) {
                        row = sheet.createRow(i);
                    }
                    for (var j = data.place[1];j <= data.place[3];j++) {
                        var cell = row.getCell(j);
                        if (cell == null) {
                            cell = row.createCell(j);
                            cell.setCellValue("");
                        }
                        cell.setCellStyle(styleArray[data.style]);
                    }
                }
            }
            
            //excel主函数
            createExcel();
        ]]></s:server-script>
    </a:init-procedure>
    <a:service-output output="/parameter"/>
</a:service>
