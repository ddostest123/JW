<?xml version="1.0" encoding="UTF-8"?>
<!--
    $Author: wanghaitao  
    $Date: 2014-10-31 下午04:38:31  
    $Revision: 1.0  
    $Purpose: APP，登录后订单，送货单详情
-->
<a:service xmlns:s="aurora.plugin.script" xmlns:a="http://www.aurora-framework.org/application" xmlns:p="uncertain.proc" trace="true">
    <a:init-procedure>
        <s:server-script><![CDATA[
            /**
             *read me
             *1.bm部分需改为相应系统的逻辑，此处逻辑为hr系统，仅供参考
             *2.session、cookie部分不用修改，如果出现session、cookie方面的问题，可检查此处的session、cookie(如'/session/@session_id'是否有值)
             *3.调试函数:println(Object);会将Object打印在控制台（如应用服务器tomcat的控制台）。例如：println($session.toXML());会将session对象以xml格式打印出来。
             */
            try {
                var result;
            
                var parameter = $ctx.parameter;
                // parameter.user_language = 'ZHS';
                // parameter.user_name = '11598060';
                // parameter.user_password = '111111';
            
                // var bm_login = new ModelService('app.login.app_sys_user_login_with_userid');
                // bm_login.execute();
            
                // //测试参数
                // parameter.asn_header_id = 31673;
            
                var asn_header_id = parameter.asn_header_id;
            
                if (!asn_header_id) {
                    result = {
                        head: {
                            message: "请求失败",
                            code: 'failure'
                        },
                        body: {
                            message: "传入参数 asn_header_id 为空",
                        }
                    };
            
                } else {
            
                    var receive_asn_header_bm = new ModelService('app.order.app_asn_header_info');
                    var header_param = {
                        asn_header_id: asn_header_id
                    };
                    var receive_asn_header_records = receive_asn_header_bm.queryAsMap(header_param).getChildren();
                    var receive_asn_header_record = receive_asn_header_records[0];
            
                    var receive_asn_lines_bm = new ModelService('app.order.app_asn_lines_info');
                    var line_param = {
                        asn_header_id: asn_header_id
                    };
                    var receive_asn_line_records = receive_asn_lines_bm.queryAsMap(line_param).getChildren();
            
                    var datas = {};
                    var header = {
                        ship_to_organization_name: receive_asn_header_record.ship_to_organization_name,
                        location_name: receive_asn_header_record.location_name,
                        comments: receive_asn_header_record.comments
                    };
                    var lines = [];
                    for (var i = 0;i < receive_asn_line_records.length;i++) {
                        var line = {};
                        line.item_code = receive_asn_line_records[i].item_code;
                        line.item_name = receive_asn_line_records[i].item_name;
                        line.po_num = receive_asn_line_records[i].po_num;
                        line.ship_quantity = receive_asn_line_records[i].ship_quantity;
                        line.receive_quantity = receive_asn_line_records[i].receive_quantity;
                        line.on_the_way_quantity = receive_asn_line_records[i].on_the_way_quantity;
                        line.uom_name = receive_asn_line_records[i].uom_name;
                        line.line_status = receive_asn_line_records[i].line_status;
                        lines.push(line);
                    }
                    datas['header'] = header;
                    datas['lines'] = lines;
            
                    result = {
                        head: {
                            message: "请求成功",
                            code: 'ok'
                        },
                        body: datas
                    };
                }
            
            } catch (e) {
                var serviceContext = Packages.aurora.service.ServiceContext.createServiceContext($ctx.getData());
                var ed = $instance('aurora.service.exception.IExceptionDescriptor');
                var map = new CompositeMap(ed.process(serviceContext, e.javaException));
                result = {
                    head: {
                        message: map.message,
                        code: 'failure'
                    },
                    body: {}
                };
            } finally {
                //执行finally代码，将result对象回写
                $ctx.parameter.json = JSON.stringify(result);
            }
        ]]></s:server-script>
    </a:init-procedure>
    <a:service-output output="/parameter/@json"/>
</a:service>
