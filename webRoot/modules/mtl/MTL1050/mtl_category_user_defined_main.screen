<?xml version="1.0" encoding="UTF-8"?>
<!--
    $Author: wanghaitao2658
    $Date: 2014-7-2 下午3:32:40  
    $Revision: 1.0  
    $Purpose: 自主品类定义，入口页面
-->
<a:screen xmlns:a="http://www.aurora-framework.org/application">
    <a:init-procedure>
        <a:model-query defaultwhereclause="flex_value_set_code = &apos;MTL_CTG_INTRODUCTION_REQUEST&apos;" fetchAll="true" model="public.fnd_flex_value_sets_query" rootPath="mtl1150_category_user_defined_introduction_req_data"/>
        <a:model-query defaultwhereclause="flex_value_set_code = &apos;VENDOR_CATAGORY&apos;" fetchAll="true" model="public.fnd_flex_value_sets_query" rootPath="mtl1150_vendor_catagory_data"/>
    </a:init-procedure>
    <a:view>
        <a:link id="mtl1050_mtl_category_user_defined_disable_link" model="mtl.MTL1050.mtl_category_user_defined_disable_enable" modelaction="delete"/>
        <a:link id="mtl1050_mtl_category_user_defined_enable_link" model="mtl.MTL1050.mtl_category_user_defined_disable_enable" modelaction="update"/>
        <a:link id="mtl1050_mtl_category_user_defined_import_link" url="${/request/@context_path}/modules/mtl/MTL1050/mtl_category_user_defined_import.screen"/>
        <a:link id="mtl1050_mtl_category_classify_items_import_link" url="${/request/@context_path}/modules/mtl/MTL1050/mtl_category_classify_item_import.screen"/>
        <a:link id="mtl1050_mtl_category_classify_items_link" url="${/request/@context_path}/modules/mtl/MTL1050/mtl_category_classify_items.screen"/>
        <a:link id="mtl1050_mtl_ctg_udf_quote_template_link" url="${/request/@context_path}/modules/mtl/MTL1050/mtl_category_user_defined_quote_template.screen"/>
        <a:link id="mtl1050_mtl_ctg_udf_quote_tmpl_disable_link" model="mtl.MTL1050.mtl_ctg_udf_quote_tmpl_disable_enable" modelaction="delete"/>
        <a:link id="mtl1050_mtl_ctg_udf_quote_tmpl_enable_link" model="mtl.MTL1050.mtl_ctg_udf_quote_tmpl_disable_enable" modelaction="update"/>
        <a:link id="category_rule_link" url="${/request/@context_path}/modules/mtl/MTL1050/mtl_category_rule_edit.screen"/>
        <a:link id="category_specifications_link" url="${/request/@context_path}/modules/mtl/MTL1050/mtl_category_specifications_edit.screen"/>
        <script><![CDATA[
            var max_category_level = 4; //最多定义的品类层数
            
            //验证自定义品类表字段的有效性
            
            function mtl1050_categoryUserDefinedValidator(record, name, value) {
                if (name == 'category_code') {
                    //验证自定义品类代码的长度不能超过30
                    if (mtl1050_getLength(value) >= 30) {
                        return '${l:MTL1050.CATEGORY_CODE_OVERLENGTH}';
                    }
                } else if (name == 'category_name') {
                    //验证自定义品类名称的长度不能超过1000
                    if (mtl1050_getLength(value) >= 1000) {
                        return '${l:MTL1050.CATEGORY_NAME_OVERLENGTH}';
                    }
                }
                return true;
            }
            
            //返回字符串真实长度
            
            function mtl1050_getLength(str) {
                var realLength = 0,
                    len = 0,
                    charCode = -1;
                if (!Aurora.isEmpty(str)) {
                    len = str.length;
                }
                for (var i = 0;i < len;i++) {
                    charCode = str.charCodeAt(i);
                    if (charCode >= 0 && charCode <= 128) {
                        realLength += 1;
                    } else {
                        realLength += 3;
                    }
                }
                return realLength;
            }
            
            function mtl1050_categoryUserDefined_result_onQuery(ds) {
                //触发查询事件时，锁住按钮
                $('mtl1050_categoryUserDefined_grid_addButton').disable();
                $('mtl1050_categoryUserDefined_grid_saveButton').disable();
            }
            
            function mtl1050_categoryUserDefined_result_onLoad(ds) {
                //触发加载数据事件时，解锁按钮
                $('mtl1050_categoryUserDefined_grid_addButton').enable();
                $('mtl1050_categoryUserDefined_grid_saveButton').enable();
            }
            
            
            function mtl1050_categoryUserDefinedMaintainDsTreeGridEditorFunction(record, name) {
                var level = record.get('category_level');
                if (name == 'vendor_catagory_desc') {
                    //获取当前的级别 如为4级则返回供应商类别选择cbb
                    if (level == 4) {
                        return 'mtl1050_category_user_defined_maintain_ds_treegrid_comboBox';
                    } else {
                        return '';
                    }
                }
                if (name == 'atm_flag') {
                    //获取当前的级别 如为4级则返回供应商附件cb
                    if (level == 4) {
                        return 'mtl1050_category_user_defined_maintain_ds_treegrid_checkBox';
                    } else {
                        return '';
                    }
                }
            
                if (name == 'category_code') {
                    if (record.isNew) {
                        return 'mtl1050_category_user_defined_maintain_ds_treegrid_textField';
                    } else {
                        return '';
                    }
                }
            
                if (name == 'category_name') {
                    if (record.get('enabled_flag') == 'Y') {
                        return 'mtl1050_category_user_defined_maintain_ds_treegrid_textField';
                    } else {
                        return '';
                    }
                }
            
                if (name == 'uom_name') {
                    if (record.get('enabled_flag') == 'Y') {
                        return 'mtl1050_category_user_defined_maintain_ds_treegrid_lov';
                    } else {
                        return '';
                    }
                }
            
                if (name == 'business_unit_name') {
                    if (record.get('enabled_flag') == 'Y') {
                        return 'mtl1050_category_user_defined_maintain_ds_treegrid_lov';
                    } else {
                        return '';
                    }
                }
            }
            
            function mtl1050_categoryUserDefinedMaintainDsSubmitSuccess(ds, res) {
                Aurora.SideBar.enable = true;
                Aurora.SideBar.show({
                    msg: '${l:PROMPT.SAVE_SUCCESS}'
                });
                ds.query();
            }
            
            function mtl1050_categoryUserDefinedMaintainAddRoot() {
                var ds = $('mtl1050_category_user_defined_maintain_ds');
            
                var new_record = ds.create({
                    'category_udf_id': '',
                    'expanded': 'Y',
                    'category_code': '',
                    'category_name_id': '',
                    'category_name': '',
                    'uom_code': '',
                    'uom_name': '',
                    'category_level': 1,
                    'parent_category_udf_id': -1,
                    'enabled_flag': 'Y'
                });
            }
            
            function mtl1050_categoryUserDefinedMaintainSave() {
                debugger;
                var ds = $('mtl1050_category_user_defined_maintain_ds');
                //判断四级品类是否都选择了供应商类别
                var records = ds.getJsonData();
                for (var i = 0;i < records.length;i++) {
                    if (records[i].category_level == 4 && (!(records[i].vendor_catagory))) {
                        Aurora.showMessage('${l:PROMPT}', '四级品类下供应商类别必输！', null);
                        return;
                    }
                }
                ds.submit();
            }
            
            function mtl1050_categoryUserDefinedMaintainDsTreegridRenderer(value, record, name) {
                var category_level = record.get('category_level');
                var category_udf_id = record.get('category_udf_id');
                var enabled_flag = record.get('enabled_flag');
                var quote_tmpl_flag = record.get('quote_tmpl_flag');
            
                if (name == 'addChird') {
                    if (!Aurora.isEmpty(category_udf_id) && enabled_flag == 'Y' && category_level < max_category_level) {
                        return '<a href="javascript:mtl1050_categoryUserDefinedMaintainDsTreegridRendererAddChird(' + category_level + ',' + category_udf_id + ')">${l:MTL_CATEGORIES_USER_DEFINED.ADD_CHIRD_CATEGORY}</a>';
                    } else if (enabled_flag == 'N') {
                        return '<div style="background:red">${l:MTL_CATEGORIES_USER_DEFINED.DISABLED_CATEGORY}</div>';
                    }
                } else if (name == 'removeCategory') {
                    var parent_category_udf_id = record.get('parent_category_udf_id');
                    var records = $('mtl1050_category_user_defined_maintain_ds').getAll();
            
                    if (!Aurora.isEmpty(category_udf_id) && enabled_flag == 'Y') {
                        if (category_level < max_category_level) {
                            return '<a href="javascript:mtl1050_categoryUserDefinedMaintainDsTreegridRendererDisableCategory(' + category_udf_id + ')">${l:MTL_CATEGORIES_USER_DEFINED.DISABLE_CATEGORY_AND_CHIRD}</a>';
                        } else {
                            return '<a href="javascript:mtl1050_categoryUserDefinedMaintainDsTreegridRendererDisableCategory(' + category_udf_id + ')">${l:MTL_CATEGORIES_USER_DEFINED.DISABLE_THIS_CATEGORY}</a>';
                        }
                    } else if (record.isNew) {
                        return '<a href="javascript:mtl1050_categoryUserDefinedMaintainDsTreegridRendererClearCategory()">${l:MTL_CATEGORIES_USER_DEFINED.CLEAR_LINE}</a>';
                    } else if (enabled_flag == 'N') {
                        if (Aurora.isEmpty(parent_category_udf_id)) { //根级品类
                            return '<a href="javascript:mtl1050_categoryUserDefinedMaintainDsTreegridRendererEnableCategory(' + category_udf_id + ')">${l:MTL_CATEGORIES_USER_DEFINED.ENABLE_CATEGORY_AND_CHIRD}</a>';
                        } else {
                            for (var i = 0;i < records.length;i++) { //判断上级品类是否启用，启用则显示，禁用则不显示
                                if (parent_category_udf_id == records[i].get('category_udf_id') && records[i].get('enabled_flag') == 'Y') {
                                    return '<a href="javascript:mtl1050_categoryUserDefinedMaintainDsTreegridRendererEnableCategory(' + category_udf_id + ')">${l:MTL_CATEGORIES_USER_DEFINED.ENABLE_CATEGORY_AND_CHIRD}</a>';
                                }
                            }
                        }
                    }
                } else if (name == 'classify_items') {
                    if (!Aurora.isEmpty(category_udf_id) && enabled_flag == 'Y') {
                        return '<a href="javascript:mtl1050_categoryClassifyItemsOpenWondow(' + category_udf_id + ')">${l:MTL_CATEGORIES_USER_DEFINED.CLASSIFY_ITEMS}</a>';
                    } else {
                        return '';
                    }
            
                } else if (name == 'enable_quote_template') {
                    if (!Aurora.isEmpty(category_udf_id) && enabled_flag == 'Y') {
                        if (quote_tmpl_flag == 'Y') {
                            return '<a href="javascript:mtl1050_ctgUdfQuoteTmplDisableFunction(' + category_udf_id + ')">${l:MTL_CATEGORIES_USER_DEFINED.DISABLE_QUOTE_TMPL}</a>';
                        } else {
                            return '<a href="javascript:mtl1050_ctgUdfQuoteTmplEnableFunction(' + category_udf_id + ')">${l:MTL_CATEGORIES_USER_DEFINED.ENABLE_QUOTE_TMPL}</a>';
                        }
                    } else {
                        return '';
                    }
                } else if (name == 'quote_template') {
                    if (!Aurora.isEmpty(category_udf_id) && enabled_flag == 'Y' && quote_tmpl_flag == 'Y') {
                        return '<a href="javascript:mtl1050_ctgUdfQuoteTmplOpenWondow(' + category_udf_id + ')">${l:MTL_CATEGORIES_USER_DEFINED.QUOTE_TMPL_SET}</a>';
                    } else {
                        return '';
                    }
                }
            }
            
            function mtl1050_ctgUdfQuoteTmplOpenWondow(category_udf_id) {
                new Aurora.Window({
                    id: 'mtl1050_mtl_ctg_udf_quote_template_window',
                    url: $('mtl1050_mtl_ctg_udf_quote_template_link').getUrl() + '?category_udf_id=' + category_udf_id,
                    title: '${l:MTL_CATEGORIES_USER_DEFINED.QUOTE_TMPL}',
                    width: 620,
                    height: 530
                });
            }
            
            function mtl1050_ctgUdfQuoteTmplDisableFunction(category_udf_id) {
                //提交AjAX请求
                Aurora.showConfirm('${l:PROMPT}', '${l:MTL_CATEGORIES_USER_DEFINED.SURE_TO_DISABLE_QUOTE_TMPL}', function() {
                    Aurora.Masker.mask(Ext.getBody(), '${l:LOADING}');
                    Aurora.request({
                        url: $('mtl1050_mtl_ctg_udf_quote_tmpl_disable_link').getUrl(),
                        para: {
                            category_udf_id: category_udf_id
                        },
                        success: function() {
                            Aurora.Masker.unmask(Ext.getBody());
                            $('mtl1050_category_user_defined_maintain_ds').query();
                        },
                        failure: function() {
                            Aurora.Masker.unmask(Ext.getBody());
                        },
                        error: function() {
                            Aurora.Masker.unmask(Ext.getBody());
                        },
                        scope: this
                    });
                });
            }
            
            function mtl1050_ctgUdfQuoteTmplEnableFunction(category_udf_id) {
                //提交AjAX请求
                Aurora.showConfirm('${l:PROMPT}', '${l:MTL_CATEGORIES_USER_DEFINED.SURE_TO_ENABLE_QUOTE_TMPL}', function() {
                    Aurora.Masker.mask(Ext.getBody(), '${l:LOADING}');
                    Aurora.request({
                        url: $('mtl1050_mtl_ctg_udf_quote_tmpl_enable_link').getUrl(),
                        para: {
                            category_udf_id: category_udf_id
                        },
                        success: function() {
                            Aurora.Masker.unmask(Ext.getBody());
                            $('mtl1050_category_user_defined_maintain_ds').query();
                        },
                        failure: function() {
                            Aurora.Masker.unmask(Ext.getBody());
                        },
                        error: function() {
                            Aurora.Masker.unmask(Ext.getBody());
                        },
                        scope: this
                    });
                });
            }
            
            function mtl1050_categoryClassifyItemsOpenWondow(category_udf_id) {
                new Aurora.Window({
                    id: 'mtl1050_mtl_category_classify_items_window',
                    url: $('mtl1050_mtl_category_classify_items_link').getUrl() + '?category_udf_id=' + category_udf_id,
                    title: '${l:MTL_CATEGORIES_USER_DEFINED.CLASSIFY_ITEMS}',
                    width: 900,
                    height: 500
                });
            }
            
            function mtl1050_categoryUserDefinedMaintainDsTreegridRendererAddChird(category_level, category_udf_id) {
                var ds = $('mtl1050_category_user_defined_maintain_ds');
                var new_record = ds.create({
                    'category_udf_id': '',
                    'expanded': 'Y',
                    'category_code': '',
                    'category_name_id': '',
                    'category_name': '',
                    'uom_code': '',
                    'uom_name': '',
                    'category_level': category_level + 1,
                    'parent_category_udf_id': category_udf_id,
                    'enabled_flag': 'Y'
                });
            }
            
            function mtl1050_categoryUserDefinedMaintainDsTreegridRendererDisableCategory(category_udf_id) {
            
                //提交AjAX请求
                Aurora.showConfirm('${l:PROMPT}', '${l:MTL_CATEGORIES_USER_DEFINED.SURE_TO_DISABLE_CATEGORY}', function() {
                    Aurora.Masker.mask(Ext.getBody(), '${l:LOADING}');
                    Aurora.request({
                        url: $('mtl1050_mtl_category_user_defined_disable_link').getUrl(),
                        para: {
                            category_udf_id: category_udf_id
                        },
                        success: function() {
                            Aurora.Masker.unmask(Ext.getBody());
                            $('mtl1050_category_user_defined_maintain_ds').query();
                        },
                        failure: function() {
                            Aurora.Masker.unmask(Ext.getBody());
                        },
                        error: function() {
                            Aurora.Masker.unmask(Ext.getBody());
                        },
                        scope: this
                    });
                });
            }
            
            function mtl1050_categoryUserDefinedMaintainDsTreegridRendererEnableCategory(category_udf_id) {
            
                //提交AjAX请求
                Aurora.showConfirm('${l:PROMPT}', '${l:MTL_CATEGORIES_USER_DEFINED.SURE_TO_ENABLE_CATEGORY}', function() {
                    Aurora.Masker.mask(Ext.getBody(), '${l:LOADING}');
                    Aurora.request({
                        url: $('mtl1050_mtl_category_user_defined_enable_link').getUrl(),
                        para: {
                            category_udf_id: category_udf_id
                        },
                        success: function() {
                            Aurora.Masker.unmask(Ext.getBody());
                            $('mtl1050_category_user_defined_maintain_ds').query();
                        },
                        failure: function() {
                            Aurora.Masker.unmask(Ext.getBody());
                        },
                        error: function() {
                            Aurora.Masker.unmask(Ext.getBody());
                        },
                        scope: this
                    });
                });
            }
            
            function mtl1050_categoryUserDefinedMaintainDsTreegridRendererClearCategory() {
                var ds = $('mtl1050_category_user_defined_maintain_ds');
                var record = ds.getCurrentRecord();
                ds.remove(record);
            }
            
            //Import category
            
            function mtl1050_categoryUserDefinedImportFun() {
                window.open($('mtl1050_mtl_category_user_defined_import_link').getUrl());
            }
            
            //Import Classify
            
            function mtl1050_categoryClassifyItemsImportFun() {
                window.open($('mtl1050_mtl_category_classify_items_import_link').getUrl());
            }
            
            function mtl1050_categoryUserDefinedQuery() {
                $('mtl1050_category_user_defined_maintain_ds').query();
            }
            
            function category_rule_renderer(value,record,name){
                var category_udf_id = record.get('category_udf_id');
                var category_level = record.get('category_level');
                var category_code = record.get('parent_category_code');
                var category_code_spec = record.get('category_code');
                
                if(name == 'category_rule'){
                    if(category_level == 4){
                        return '<a href="javascript:category_rule_renderer_win(' + category_udf_id + ',\'' + category_code + '\')">规则维护</a>';
                    }else{
                        return '';
                    }
                }
                 if(name == 'specifications'){
                    if(category_level == 3){
                        return '<a href="javascript:category_specifications_renderer_win(' + category_udf_id + ',\'' + category_code_spec + '\')">规格维护</a>';
                    }else{
                        return '';
                    }
                }
            }
            
            function category_rule_renderer_win(category_udf_id,category_code){
                new Aurora.Window({
                    id: 'category_rule_window',
                    url: $('category_rule_link').getUrl() + '?category_udf_id=' + category_udf_id + '&category_code=' + category_code,
                    title: '规则维护',
                    width: 550,
                    height: 420
                });
 		   $('category_rule_window').on('beforeclose', function(){
        	        $('mtl1050_category_export_ds').query();
        	    }); 
            }
            function category_specifications_renderer_win(category_udf_id,category_code){
                new Aurora.Window({
                    id: 'category_specifications_window',
                    url: $('category_specifications_link').getUrl() + '?category_udf_id=' + category_udf_id + '&category_code=' + category_code,
                    title: '规格维护',
                    width: 550,
                    height: 420
                });
            }
            function pur_stock_export_fun(){
		  Aurora.Masker.mask(Ext.getBody(), '导出中.....');
               setTimeout(function() {
                    if (Ext.isIE) {
                        alert("该功能暂不支持ie9版本以下的浏览器！");
                        return;
                    }
                    var obj = $('mtl1050_category_export_ds').getAll();
                    var data = [];
                    var key_data = [];
                    var title_data = [];
            
                    title_data.push('品类代码');
                    title_data.push('品类名称');
                    title_data.push('业务实体');
                    title_data.push('计量单位');
                    title_data.push('供应商类别');
                    title_data.push('需要上传附件');
                    title_data.push('级别');
                    title_data.push('引入要求');
                    title_data.push('评级分类');
                    title_data.push('角色代码');
                    title_data.push('属性');
                    title_data.push('属性值');
                    title_data.push('创建人');
                    title_data.push('创建日期');
                    title_data.push('最后更新人');
                    title_data.push('最后更新日期');
                    key_data.push('category_code');
                    key_data.push('category_name');
                    key_data.push('business_unit_name');
                    key_data.push('uom_name');
                    key_data.push('vendor_catagory_desc');
                    key_data.push('atm_flag');
                    key_data.push('category_level');
                    key_data.push('introduction_request_display');
                    key_data.push('rating_classify_desc');
                    key_data.push('user_code');
                    key_data.push('attr_code');
                    key_data.push('attr_value');
                    key_data.push('created_name');
                    key_data.push('creation_date');
                    key_data.push('last_updated_name');
                    key_data.push('last_update_date');
                    for (var i = 0;i < obj.length;i++) {
                        data.push(obj[i].data);
                    }
            
                    JSonToCSV.setDataConver({
                        data: data,
                        fileName: '自主品类定义',
                        excelstyles: ['border-bottom', 'border-top', 'border-left', 'border-right'],
                        columns: {
                            title: title_data,
                            key: key_data,
                            formatter: function(n, v) {}
                        }
                    });
			 Aurora.Masker.unmask(Ext.getBody());
                }, 5000);
            }
            
            var JSonToCSV = {
                /*
                 * obj是一个对象，其中包含有：
                 * ## data 是导出的具体数据
                 * ## fileName 是导出时保存的文件名称 是string格式
                 * ## showLabel 表示是否显示表头 默认显示 是布尔格式
                 * ## columns 是表头对象，且title和key必须一一对应，包含有
                 title:[], // 表头展示的文字
                 key:[], // 获取数据的Key
                 formatter: function() // 自定义设置当前数据的 传入(key, value)
                 */
                setDataConver: function(obj) {
                    var bw = this.browser();
                    //if (bw['ie'] < 9) return; // IE9以下的
                    var data = obj['data'],
                        ShowLabel = typeof obj['showLabel'] === 'undefined' ? true : obj['showLabel'],
                        fileName = (obj['fileName'] || 'UserExport') + '.csv',
                        columns = obj['columns'] || {
                            title: [],
                            key: [],
                            formatter: undefined
                        };
                    var ShowLabel = typeof ShowLabel === 'undefined' ? true : ShowLabel;
                    var row = "",
                        CSV = '',
                        key;
                    // 如果要现实表头文字
                    if (ShowLabel) {
                        // 如果有传入自定义的表头文字
                        if (columns.title.length) {
                            columns.title.map(function(n) {
                                row += n + ',';
                            });
                        } else {
                            // 如果没有，就直接取数据第一条的对象的属性
                            for (key in data[0]) row += key + ',';
                        }
                        row = row.slice(0, -1); // 删除最后一个,号，即a,b, => a,b
                        CSV += row + '\r\n'; // 添加换行符号
                    }
                    // 具体的数据处理
                    data.map(function(n) {
                        debugger;
                        row = '';
                        // 如果存在自定义key值
                        if (columns.key.length) {
                            columns.key.map(function(m) {
                                var str=(typeof columns.formatter === 'function' ? columns.formatter(m, n[m]) || n[m] : n[m]);
                                //alert(str);
                                if(str=='0'||!str){
                                    str='';
                                }
                                if(str.length>=7){
                                    var value = '="' + str + '",';
                                }
                                else{
                                    var value = '"' + str + '",';
                                }
                                
                                if (value == undefined) {
                                    value = '';
                                }
                                row += value;
                            });
                        } else {
                            for (key in n) {
                                var str1 =(typeof columns.formatter === 'function' ? columns.formatter(key, n[key]) || n[key] : n[key]);
                                if(str1=='0'||!str1){
                                    str1='';
                                }
                                if(str1.length>=7){
                                    var val = '="' + str1 + '",';
                                }
                                else{
                                    var val = '"' + str1 + '",';
                                }                                
                                if (val == undefined) {
                                    val = '';
                                }
                                row += val;
                            }
                        }
                        row.slice(0, row.length - 1); // 删除最后一个,
                        CSV += row + '\r\n'; // 添加换行符号
                    });
                    if (!CSV) return;
                    this.SaveAs(fileName, CSV);
                },
                SaveAs: function(fileName, csvData) {
                    var bw = this.browser();
                    if (!bw['edge'] || !bw['ie']) {
                        var alink = document.createElement("a");
                        alink.id = "linkDwnldLink";
                        alink.href = this.getDownloadUrl(csvData);
                        document.body.appendChild(alink);
                        var linkDom = document.getElementById('linkDwnldLink');
                        linkDom.setAttribute('download', fileName);
                        linkDom.click();
                        document.body.removeChild(linkDom);
                    } else if (bw['ie'] >= 10 || bw['edge'] == 'edge') {
                        var _utf = "\uFEFF";
                        var _csvData = new Blob([_utf + csvData], {
                            type: 'text/csv'
                        });
                        navigator.msSaveBlob(_csvData, fileName);
                    } else {
                        var oWin = window.top.open("about:blank", "_blank");
                        oWin.document.write('sep=,\r\n' + csvData);
                        oWin.document.close();
                        oWin.document.execCommand('SaveAs', true, fileName);
                        oWin.close();
                    }
                },
                getDownloadUrl: function(csvData) {
                    var _utf = "\uFEFF"; // 为了使Excel以utf-8的编码模式，同时也是解决中文乱码的问题
                    if (window.Blob && window.URL && window.URL.createObjectURL) {
                        var csvData = new Blob([_utf + csvData], {
                            type: 'text/csv'
                        });
                        return URL.createObjectURL(csvData);
                    }
                    return 'data:attachment/csv;charset=utf-8,' + _utf + encodeURIComponent(csvData);
                },
                browser: function() {
                    var Sys = {};
                    var ua = navigator.userAgent.toLowerCase();
                    var s;
                    (s = ua.indexOf('edge') !== -1 ? Sys.edge = 'edge' : ua.match(/rv:([\d.]+)\) like gecko/)) ? Sys.ie = s[1] : (s = ua.match(/msie ([\d.]+)/)) ? Sys.ie = s[1] : (s = ua.match(/firefox\/([\d.]+)/)) ? Sys.firefox = s[1] : (s = ua.match(/chrome\/([\d.]+)/)) ? Sys.chrome = s[1] : (s = ua.match(/opera.([\d.]+)/)) ? Sys.opera = s[1] : (s = ua.match(/version\/([\d.]+).*safari/)) ? Sys.safari = s[1] : 0;
                    return Sys;
                }
            };
        ]]></script>
        <a:dataSets>
            <a:dataSet id="need_type_ds">
                <a:datas>
                    <a:record name="物控员" code="1"/>
                    <a:record name="采购员" code="2"/>
                </a:datas>
            </a:dataSet>
            <a:dataSet id="mtl1150_category_user_defined_introduction_req_ds">
                <a:datas dataSource="mtl1150_category_user_defined_introduction_req_data"/>
            </a:dataSet>
            <a:dataSet id="mtl1150_vendor_catagory_ds">
                <a:datas dataSource="mtl1150_vendor_catagory_data"/>
            </a:dataSet>
            <a:dataSet id="mtl1050_category_user_defined_query_ds" autoCreate="true"/>
            <a:dataSet id="mtl1050_category_user_defined_maintain_ds" autoQuery="true" fetchAll="true" model="mtl.MTL1050.mtl_category_user_defined_maintain" queryDataSet="mtl1050_category_user_defined_query_ds">
                <a:fields>
                    <a:field name="parent_category_udf_id"/>
                    <a:field name="category_code" required="true" requiredMessage="${l:MTL_CATEGORIES_USER_DEFINED.CATEGORY_CODE_NOT_NULL}" validator="mtl1050_categoryUserDefinedValidator"/>
                    <a:field name="category_name" required="true" requiredMessage="${l:MTL_CATEGORIES_USER_DEFINED.CATEGORY_NAME_NOT_NULL}" validator="mtl1050_categoryUserDefinedValidator"/>
                    <a:field name="uom_code"/>
                    <a:field name="uom_name" autoComplete="true" autoCompleteField="uom_desc" lovGridHeight="350" lovHeight="500" lovService="public.fnd_uom_codes_lov" lovWidth="500" title="MTL_CATEGORIES_USER_DEFINED.UOM_CODE">
                        <a:mapping>
                            <a:map from="uom_code" to="uom_code"/>
                            <a:map from="uom_desc" to="uom_name"/>
                        </a:mapping>
                    </a:field>
                    <a:field name="category_level"/>
                    <a:field name="enabled_flag" checkedValue="Y" defaultValue="Y" uncheckedValue="N"/>
                    <a:field name="atm_flag" checkedValue="Y" defaultValue="N" uncheckedValue="N"/>
                    <a:field name="expanded" checkedValue="Y" uncheckedValue="N"/>
                    <a:field name="business_unit_name" autoComplete="true" autoCompleteField="business_unit_name" lovHeight="500" lovService="public.fnd_business_unit_lov" lovWidth="600" title="业务实体">
                        <a:mapping>
                            <a:map from="business_unit_id" to="business_unit_id"/>
                            <a:map from="business_unit_name" to="business_unit_name"/>
                            <a:map from="company_id" to="company_id"/>
                        </a:mapping>
                    </a:field>
                    <a:field name="introduction_request" defaultValue="STRICT"/>
                    <a:field name="vendor_catagory"/>
                    <a:field name="vendor_catagory_desc" displayField="flex_desc" options="mtl1150_vendor_catagory_ds" returnField="vendor_catagory" valueField="flex_value"/>
                    <a:field name="introduction_request_display" displayField="flex_desc" options="mtl1150_category_user_defined_introduction_req_ds" returnField="introduction_request" valueField="flex_value"/>
                    <a:field name="rating_classify_desc" autoComplete="true" autoCompleteField="rating_classify_code" lovHeight="500" lovService="cux.JX.JX1010.jx1010_grade_rating_lov" lovWidth="600" title="品级分组">
                        <a:mapping>
                            <a:map from="flex_value" to="rating_classify_code"/>
                            <a:map from="flex_desc" to="rating_classify_desc"/>
                        </a:mapping>
                    </a:field>
                    <a:field name="user_code" autoComplete="true" autoCompleteField="user_code" lovHeight="500" lovService="public.sys_role_lov" lovWidth="600" title="角色">
                        <a:mapping>
                            <a:map from="role_code" to="user_code"/>
                            <a:map from="role_name" to="user_desc"/>
                        </a:mapping>
                    </a:field>
                    <a:field name="need_type_desc" displayField="name" options="need_type_ds" returnField="need_type" valueField="code"/>
                </a:fields>
                <a:events>
                    <a:event name="query" handler="mtl1050_categoryUserDefined_result_onQuery"/>
                    <a:event name="load" handler="mtl1050_categoryUserDefined_result_onLoad"/>
                    <a:event name="submitsuccess" handler="mtl1050_categoryUserDefinedMaintainDsSubmitSuccess"/>
                </a:events>
            </a:dataSet>
            <a:dataSet id="mtl1050_category_export_ds" autoQuery="true" fetchAll="true" model="mtl.MTL1050.mtl_category_export"/>
        </a:dataSets>
        <a:screenBody>
            <a:screenTopToolbar>
                <a:toolbarButton id="mtl1050_categoryUserDefined_grid_addButton" click="mtl1050_categoryUserDefinedMaintainAddRoot" style="margin-left:20px;" text="MTL_CATEGORIES_USER_DEFINED.NEW_TOP_CATEGORY" width="100"/>
                <a:toolbarButton id="mtl1050_categoryUserDefined_grid_saveButton" click="mtl1050_categoryUserDefinedMaintainSave" style="margin-left:20px;" text="PROMPT.SAVE" width="100"/>
                <a:toolbarButton id="mtl1050_categoryUserDefinedImportButton" click="mtl1050_categoryUserDefinedImportFun" style="margin-left:20px;" text="MTL_CATEGORY_IMPORTS.BATCH_IMPORT" width="100"/>
                <a:toolbarButton id="mtl1050_categoryClassifyItemsImportButton" click="mtl1050_categoryClassifyItemsImportFun" style="margin-left:20px;" text="MTL_CATEGORY_IMPORTS.IMPORT_CLASSIFY_ITEMS" width="100"/>
                <a:toolbarButton click="pur_stock_export_fun" text="导出" width="100"/>
            </a:screenTopToolbar>
            <a:queryForm bindTarget="mtl1050_category_user_defined_query_ds" resultTarget="mtl1050_category_user_defined_maintain_ds" style="width:100%;border:none">
                <a:formToolBar>
                    <a:hBox labelWidth="120">
                        <a:textField name="category_code" prompt="MTL_CATEGORIES_USER_DEFINED.CATEGORY_CODE">
                            <a:events>
                                <a:event name="enterdown" handler="mtl1050_categoryUserDefinedQuery"/>
                            </a:events>
                        </a:textField>
                        <a:textField name="category_name" prompt="MTL_CATEGORIES_USER_DEFINED.CATEGORY_NAME_ID">
                            <a:events>
                                <a:event name="enterdown" handler="mtl1050_categoryUserDefinedQuery"/>
                            </a:events>
                        </a:textField>
                    </a:hBox>
                </a:formToolBar>
            </a:queryForm>
            <a:treeGrid id="mtl1050_category_user_defined_maintain_ds_treegrid" bindTarget="mtl1050_category_user_defined_maintain_ds" expandField="expanded" idField="category_udf_id" marginHeight="160" marginWidth="80" parentField="parent_category_udf_id" showCheckBox="false">
                <a:columns>
                    <a:column name="category_code" align="left" editorFunction="mtl1050_categoryUserDefinedMaintainDsTreeGridEditorFunction" width="150"/>
                    <a:column name="category_rule" align="center" prompt="品类规则" renderer="category_rule_renderer" width="50"/>
                    <a:column name="category_name" align="left" editorFunction="mtl1050_categoryUserDefinedMaintainDsTreeGridEditorFunction" width="130"/>
                    <a:column name="business_unit_name" align="left" editorFunction="mtl1050_categoryUserDefinedMaintainDsTreeGridEditorFunction" prompt="FND_BUSINESS_UNITS.BUSINESS_UNIT" width="80"/>
                    <a:column name="uom_name" align="left" editorFunction="mtl1050_categoryUserDefinedMaintainDsTreeGridEditorFunction" width="50"/>
                    <a:column name="vendor_catagory_desc" align="left" editorFunction="mtl1050_categoryUserDefinedMaintainDsTreeGridEditorFunction" prompt="供应商类别" width="50"/>
                    <a:column name="atm_flag" align="left" editorFunction="mtl1050_categoryUserDefinedMaintainDsTreeGridEditorFunction" prompt="需要上传附件" width="50"/>
                    <a:column name="category_level" align="left" width="40"/>
                    <a:column align="center" prompt="MTL_CATEGORIES_USER_DEFINED.CATEGORY_OPERATION">
                        <a:column name="addChird" align="center" renderer="mtl1050_categoryUserDefinedMaintainDsTreegridRenderer" width="50"/>
                        <a:column name="removeCategory" align="center" renderer="mtl1050_categoryUserDefinedMaintainDsTreegridRenderer" width="50"/>
                    </a:column>
                    <a:column align="center" prompt="MTL_CATEGORIES_USER_DEFINED.QUOTE_TMPL_OPERATION">
                        <a:column name="enable_quote_template" align="center" renderer="mtl1050_categoryUserDefinedMaintainDsTreegridRenderer" width="50"/>
                        <a:column name="quote_template" align="center" renderer="mtl1050_categoryUserDefinedMaintainDsTreegridRenderer" width="50"/>
                    </a:column>
                    <a:column name="specifications" align="center" prompt="规格" renderer="category_rule_renderer" width="60"/>
                    <a:column name="classify_items" align="center" prompt="MTL_CATEGORIES_USER_DEFINED.CLASSIFY_ITEMS" renderer="mtl1050_categoryUserDefinedMaintainDsTreegridRenderer" width="60"/>
                    <a:column name="introduction_request_display" align="center" editor="mtl1050_category_user_defined_maintain_ds_treegrid_comboBox" prompt="MTL_CATEGORIES_USER_DEFINED.INTRODUCTION_REQUEST" width="70"/>
                    <a:column name="rating_classify_desc" align="center" editor="mtl1050_category_user_defined_maintain_ds_treegrid_lov" prompt="评级分类" width="70"/>
                    <a:column name="user_code" align="center" editor="mtl1050_category_user_defined_maintain_ds_treegrid_lov" prompt="角色代码" width="70"/>
                    <a:column name="need_type_desc" align="center" editor="mtl1050_category_user_defined_maintain_ds_treegrid_comboBox" prompt="需求方" width="70"/>
                </a:columns>
                <a:editors>
                    <a:lov id="mtl1050_category_user_defined_maintain_ds_treegrid_lov"/>
                    <a:textField id="mtl1050_category_user_defined_maintain_ds_treegrid_textField"/>
                    <a:comboBox id="mtl1050_category_user_defined_maintain_ds_treegrid_comboBox"/>
                    <a:checkBox id="mtl1050_category_user_defined_maintain_ds_treegrid_checkBox"/>
                </a:editors>
            </a:treeGrid>
        </a:screenBody>
    </a:view>
</a:screen>
